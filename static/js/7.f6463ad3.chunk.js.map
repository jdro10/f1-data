{"version":3,"sources":["components/Countdown/ClockCountdown.js","components/Stats/Standings/DriversStandings.js","components/Stats/Standings/ConstructorsStandings.js","components/Cards/GenericCard.js","components/Stats/MainFeed/PreviousRaceCard.js","components/Stats/MainFeed/NextRaceCard.js","components/Stats/MainFeed/PreviousRaceStats.js","components/Stats/MainFeed/DriversStandingsCard.js","components/Stats/MainFeed/ConstructorsStandingsCard.js","components/Stats/MainFeed/MainFeed.js","pages/HomePage.js","data/CountryCodeNationality.js","data/TeamColors.js","components/TeamColor/TeamColor.js","helpers/Helpers.js"],"names":["ClockCountdown","date","time","Date","now","getTime","split","renderer","days","hours","minutes","seconds","completed","xs","sm","lg","DriversStandings","style","driversStandings","responsive","className","map","driver","index","position","Driver","permanentNumber","countryCode","CountriesCodeNationality","nationality","toLowerCase","height","constructorId","Constructors","familyName","toUpperCase","givenName","fontSize","name","wins","points","ConstructorsStandings","constructorsStandings","constructor","Constructor","md","GenericCard","cardTitle","cardBody","cardFooter","cardHeight","variant","Card","bg","text","Header","Body","Row","undefined","Footer","PreviousRaceCard","lastRace","useState","setCountryCode","loadingCountryCode","setLoadingCountryCode","useEffect","a","fetch","MRData","RaceTable","Races","Circuit","Location","country","then","res","json","result","alpha2Code","fetchCountryCode","round","raceName","circuitName","getLocalRaceDate","marginTop","locality","to","season","Button","NextRaceCard","nextRace","catch","error","PreviousRaceStats","numberOfRaces","fastestLap","setFastestLap","polePosition","setPolePosition","loadingPolePosition","setLoadingPolePosition","QualifyingResults","fetchPolePosition","Results","forEach","lap","FastestLap","rank","Table","slice","Col","TeamColor","Time","Q3","DriversStandingsCard","overflow","overflowY","ConstructorsStandingsCard","MainFeed","setNextRace","setLastRace","setDriversStandings","loadingNextRace","setLoadingNextRace","loadingLastRace","setLoadingLastRace","setConstructorsStandings","loadingTeamsStandings","setLoadingTeamsStandings","loadingDriversStandings","setLoadingDriversStandings","fetchPreviousRaceResult","fetchNextRaceData","fetchConstructorsStandings","StandingsTable","StandingsLists","ConstructorStandings","fetchDriversStandings","DriverStandings","cardsSpacing","marginBottom","Container","minHeight","Spinner","animation","HomePage","British","Finnish","Dutch","Mexican","Spanish","Australian","Monegasque","French","German","Japanese","Canadian","Italian","Russian","Austrian","Swiss","American","Thai","Swedish","Portuguese","Brazilian","Hungarian","Argentine","Belgian","Belgium","Danish","Liechtensteiner","Irish","Chilean","Venezuelan","Colombian","Czech","Malaysian","Indian","Polish","Indonesian","Rhodesian","Russia","Korea","TeamColors","red_bull","williams","mercedes","mclaren","aston_martin","alphatauri","alpine","ferrari","haas","alfa","renault","racing_point","width","backgroundColor","hasOwnProperty","raceDate","getHours","getMinutes"],"mappings":"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","file":"static/js/7.f6463ad3.chunk.js","sourcesContent":["import React from \"react\";\nimport Col from \"react-bootstrap/Col\";\nimport Countdown from \"react-countdown\";\n\nconst ClockCountdown = ({ date, time }) => {\n  const renderer = ({ days, hours, minutes, seconds, completed }) => {\n    if (completed) {\n      return (\n        <Col>\n          <h1>Race in progress</h1>\n          <h5>Waiting for race results</h5>\n        </Col>\n      );\n    } else {\n      return (\n        <>\n          <Col xs={3} sm={2} lg={1}>\n            <h1>{days}</h1>\n            <h5>days</h5>\n          </Col>\n          <Col xs={3} sm={2} lg={1}>\n            <h1>{hours}</h1>\n            <h5>hour.</h5>\n          </Col>\n          <Col xs={3} sm={2} lg={1}>\n            <h1>{minutes}</h1>\n            <h5>min.</h5>\n          </Col>\n          <Col xs={3} sm={2} lg={1}>\n            <h1>{seconds}</h1>\n            <h5>sec.</h5>\n          </Col>\n        </>\n      );\n    }\n  };\n\n  return (\n    <Countdown\n      date={\n        Date.now() +\n        (new Date(date).getTime() +\n          time.split(\":\")[0] * 3600000 -\n          new Date().getTime())\n      }\n      renderer={renderer}\n    />\n  );\n};\n\nexport default ClockCountdown;\n","import React from \"react\";\nimport Table from \"react-bootstrap/Table\";\nimport { CircleFlag } from \"react-circle-flags\";\nimport { CountriesCodeNationality } from \"../../../data/CountryCodeNationality\";\nimport Row from \"react-bootstrap/Row\";\nimport Col from \"react-bootstrap/Col\";\nimport \"../Styles/Table.css\";\nimport TeamColor from \"../../TeamColor/TeamColor\";\n\nconst DriversStandings = ({ style, driversStandings }) => {\n  return (\n    <div style={style}>\n      <Table responsive=\"xs\">\n        <thead>\n          <tr>\n            <th>Pos</th>\n            <th className=\"hideXS\">No</th>\n            <th>Name/Team</th>\n            <th className=\"hideXS\">Wins</th>\n            <th>Points</th>\n          </tr>\n        </thead>\n        <tbody>\n          {driversStandings.map((driver, index) => (\n            <tr key={index} className=\"align-middle\">\n              <td>{driver.position}</td>\n              <td className=\"hideXS\">{driver.Driver.permanentNumber}</td>\n              <td>\n                <Row className=\"g-0\">\n                  <Col xs={2} className=\"align-self-center\">\n                    <CircleFlag\n                      countryCode={CountriesCodeNationality[\n                        driver.Driver.nationality\n                      ].toLowerCase()}\n                      height={20}\n                    />\n                  </Col>\n                  <Col xs={1}>\n                    <TeamColor\n                      constructorId={driver.Constructors[0].constructorId}\n                      height=\"42px\"\n                    />\n                  </Col>\n                  <Col xs={8} className=\"text-start\">\n                    <Row>\n                      <Col className=\"showXS\">\n                        <b>{driver.Driver.familyName.toUpperCase()}</b>\n                      </Col>\n                      <Col className=\"hideXS\">\n                        {driver.Driver.givenName}{\" \"}\n                        <b>{driver.Driver.familyName.toUpperCase()}</b>\n                      </Col>\n                    </Row>\n                    <Row>\n                      <Col style={{ fontSize: \"13px\" }}>\n                        {driver.Constructors[0].name}\n                      </Col>\n                    </Row>\n                  </Col>\n                </Row>\n              </td>\n              <td className=\"hideXS\">{driver.wins}</td>\n              <td>{driver.points}</td>\n            </tr>\n          ))}\n        </tbody>\n      </Table>\n    </div>\n  );\n};\n\nexport default DriversStandings;\n","import React from \"react\";\nimport Table from \"react-bootstrap/Table\";\nimport { CircleFlag } from \"react-circle-flags\";\nimport { CountriesCodeNationality } from \"../../../data/CountryCodeNationality\";\nimport Row from \"react-bootstrap/Row\";\nimport Col from \"react-bootstrap/Col\";\nimport \"../Styles/Table.css\";\nimport TeamColor from \"../../TeamColor/TeamColor\";\n\nconst ConstructorsStandings = ({ style, constructorsStandings }) => {\n  return (\n    <div style={style}>\n      {constructorsStandings !== null ? (\n        <Table responsive=\"sm\">\n          <thead>\n            <tr>\n              <th>Pos</th>\n              <th>Name</th>\n              <th className=\"hideXS\">Wins</th>\n              <th>Points</th>\n            </tr>\n          </thead>\n          <tbody>\n            {constructorsStandings.map((constructor, index) => (\n              <tr key={index}>\n                <td>{constructor.position}</td>\n                <td>\n                  <Row>\n                    <Col xs={2}>\n                      <CircleFlag\n                        countryCode={CountriesCodeNationality[\n                          constructor.Constructor.nationality\n                        ].toLowerCase()}\n                        height={20}\n                      />\n                    </Col>\n                    <Col xs={1}>\n                      <TeamColor\n                        constructorId={constructor.Constructor.constructorId}\n                      />\n                    </Col>\n                    <Col xs={8} className=\"text-start\">\n                      {constructor.Constructor.name.toUpperCase()}\n                    </Col>\n                  </Row>\n                </td>\n                <td className=\"hideXS\">{constructor.wins}</td>\n                <td>{constructor.points}</td>\n              </tr>\n            ))}\n          </tbody>\n        </Table>\n      ) : (\n        <Row className=\"justify-content-center text-center\">\n          <Col md=\"auto\">\n            <h3>\n              There's no constructors' standings data available for this season.\n            </h3>\n            <br />\n          </Col>\n        </Row>\n      )}\n    </div>\n  );\n};\n\nexport default ConstructorsStandings;\n","import React from \"react\";\nimport Card from \"react-bootstrap/Card\";\nimport Row from \"react-bootstrap/Row\";\n\nconst GenericCard = ({\n  cardTitle,\n  cardBody,\n  cardFooter,\n  cardHeight,\n  variant,\n}) => {\n  return (\n    <Card\n      style={{ height: cardHeight }}\n      className=\"text-center\"\n      bg={variant}\n      text={variant === \"light\" ? \"dark\" : \"white\"}\n    >\n      <Card.Header>\n        <b>{cardTitle}</b>\n      </Card.Header>\n      <Card.Body>\n        <Row className=\"justify-content-md-center\">{cardBody}</Row>\n      </Card.Body>\n      {cardFooter !== undefined ? (\n        <Card.Footer>{cardFooter}</Card.Footer>\n      ) : null}\n    </Card>\n  );\n};\n\nexport default GenericCard;\n","import React, { useState, useEffect } from \"react\";\nimport GenericCard from \"../../Cards/GenericCard\";\nimport { Link } from \"react-router-dom\";\nimport { CircleFlag } from \"react-circle-flags\";\nimport Button from \"react-bootstrap/Button\";\nimport { getLocalRaceDate } from \"../../../helpers/Helpers\";\n\nconst PreviousRaceCard = ({ lastRace }) => {\n  const [countryCode, setCountryCode] = useState(null);\n  const [loadingCountryCode, setLoadingCountryCode] = useState(true);\n\n  useEffect(() => {\n    const fetchCountryCode = async () => {\n      await fetch(\n        `https://restcountries.eu/rest/v2/name/${lastRace.MRData.RaceTable.Races[0].Circuit.Location.country}?fullText=true`\n      )\n        .then((res) => res.json())\n        .then((result) => {\n          setCountryCode(result[0].alpha2Code);\n          setLoadingCountryCode(false);\n        });\n    };\n\n    fetchCountryCode();\n  }, [lastRace.MRData.RaceTable.Races]);\n\n  return (\n    <GenericCard\n      cardTitle={\"Previous race\"}\n      cardBody={\n        <div>\n          <h5>Round {lastRace.MRData.RaceTable.round}</h5>\n          <h1>{lastRace.MRData.RaceTable.Races[0].raceName}</h1>\n          <h5>{lastRace.MRData.RaceTable.Races[0].Circuit.circuitName}</h5>\n          <h6>{lastRace.MRData.RaceTable.Races[0].date}</h6>\n          <h6>\n            {getLocalRaceDate(\n              lastRace.MRData.RaceTable.Races[0].date,\n              lastRace.MRData.RaceTable.Races[0].time\n            )}\n          </h6>\n          {loadingCountryCode ? null : (\n            <>\n              <br />\n              <CircleFlag\n                countryCode={countryCode.toLowerCase()}\n                height={120}\n              />\n            </>\n          )}\n          <h5 style={{ marginTop: \"5%\" }}>\n            {lastRace.MRData.RaceTable.Races[0].Circuit.Location.country}\n          </h5>\n          <h5>\n            {lastRace.MRData.RaceTable.Races[0].Circuit.Location.locality}\n          </h5>\n        </div>\n      }\n      cardFooter={\n        <Link\n          to={`/race/${lastRace.MRData.RaceTable.season}/${lastRace.MRData.RaceTable.round}`}\n        >\n          <Button variant=\"dark\">Full race result</Button>\n        </Link>\n      }\n      cardHeight=\"34rem\"\n      variant=\"light\"\n    />\n  );\n};\n\nexport default PreviousRaceCard;\n","import React, { useState, useEffect } from \"react\";\nimport GenericCard from \"../../Cards/GenericCard\";\nimport { Link } from \"react-router-dom\";\nimport { CircleFlag } from \"react-circle-flags\";\nimport Button from \"react-bootstrap/Button\";\nimport ClockCoutdown from \"../../Countdown/ClockCountdown\";\nimport { getLocalRaceDate } from \"../../../helpers/Helpers\";\nimport { CountriesCodeNationality } from \"../../../data/CountryCodeNationality\";\n\nconst NextRaceCard = ({ nextRace }) => {\n  const [countryCode, setCountryCode] = useState(null);\n  const [loadingCountryCode, setLoadingCountryCode] = useState(true);\n\n  useEffect(() => {\n    const fetchCountryCode = async () => {\n      await fetch(\n        `https://restcountries.eu/rest/v2/name/${nextRace.Circuit.Location.country}?fullText=true`\n      )\n        .then((res) => res.json())\n        .then((result) => {\n          setCountryCode(result[0].alpha2Code);\n          setLoadingCountryCode(false);\n        })\n        .catch((error) => {\n          setCountryCode(\n            CountriesCodeNationality[\n              nextRace.Circuit.Location.country\n            ].toLowerCase()\n          );\n          setLoadingCountryCode(false);\n        });\n    };\n\n    fetchCountryCode();\n  }, [nextRace.Circuit.Location.country]);\n\n  return (\n    <GenericCard\n      cardTitle=\"Next race\"\n      cardBody={\n        <>\n          <h5>Round {nextRace.round}</h5>\n          <h1>{nextRace.raceName}</h1>\n          <h5>{nextRace.Circuit.circuitName}</h5>\n          <h6>{nextRace.date}</h6>\n          <h6>{getLocalRaceDate(nextRace.date, nextRace.time)}</h6>\n          {loadingCountryCode ? null : (\n            <CircleFlag countryCode={countryCode.toLowerCase()} height={100} />\n          )}\n          <p></p>\n          <ClockCoutdown date={nextRace.date} time={nextRace.time} />\n        </>\n      }\n      cardFooter={\n        <Link to={`/race/${nextRace.season}/${nextRace.round}`}>\n          <Button variant=\"dark\">Race information</Button>\n        </Link>\n      }\n      cardHeight=\"32rem\"\n      variant=\"light\"\n    />\n  );\n};\n\nexport default NextRaceCard;\n","import React, { useState, useEffect } from \"react\";\nimport GenericCard from \"../../Cards/GenericCard\";\nimport { CountriesCodeNationality } from \"../../../data/CountryCodeNationality\";\nimport { CircleFlag } from \"react-circle-flags\";\nimport Table from \"react-bootstrap/Table\";\nimport TeamColor from \"../../TeamColor/TeamColor\";\nimport \"../Styles/Table.css\";\nimport Row from \"react-bootstrap/Row\";\nimport Col from \"react-bootstrap/Col\";\n\nconst PreviousRaceStats = ({ lastRace, numberOfRaces }) => {\n  const [fastestLap, setFastestLap] = useState(null);\n  const [polePosition, setPolePosition] = useState(null);\n  const [loadingPolePosition, setLoadingPolePosition] = useState(true);\n\n  useEffect(() => {\n    const getFastestLap = () => {\n      lastRace.MRData.RaceTable.Races[0].Results.forEach((lap) => {\n        if (lap.FastestLap && lap.FastestLap.rank === \"1\") {\n          setFastestLap(lap);\n          return;\n        }\n      });\n    };\n\n    const fetchPolePosition = async () => {\n      await fetch(\n        `https://ergast.com/api/f1/${lastRace.MRData.RaceTable.season}/${lastRace.MRData.RaceTable.round}/qualifying.json`\n      )\n        .then((res) => res.json())\n        .then((result) => {\n          setPolePosition(\n            result.MRData.RaceTable.Races[0].QualifyingResults[0]\n          );\n          setLoadingPolePosition(false);\n        });\n    };\n\n    fetchPolePosition();\n    getFastestLap();\n  }, [\n    lastRace.MRData.RaceTable.season,\n    lastRace.MRData.RaceTable.round,\n    lastRace.MRData.RaceTable.Races,\n  ]);\n\n  return (\n    <GenericCard\n      cardTitle={`Previous race: ${lastRace.MRData.RaceTable.Races[0].raceName}`}\n      cardBody={\n        <div>\n          <h4>\n            <b>Race result</b>\n          </h4>\n          <Table responsive>\n            <tbody className=\"justify-content-center\">\n              {lastRace.MRData.RaceTable.Races[0].Results.slice(0, 3).map(\n                (driver, index) => (\n                  <tr key={index} className=\"align-middle\">\n                    <td>{driver.position}</td>\n                    <td>\n                      <Row>\n                        <Col xs={2} className=\"align-self-center\">\n                          <CircleFlag\n                            countryCode={CountriesCodeNationality[\n                              driver.Driver.nationality\n                            ].toLowerCase()}\n                            height={20}\n                          />\n                        </Col>\n                        <Col xs={1}>\n                          <TeamColor\n                            constructorId={driver.Constructor.constructorId}\n                            height=\"42px\"\n                          />\n                        </Col>\n                        <Col xs={8} className=\"text-start\">\n                          <Row>\n                            <Col className=\"hideXS\">\n                              {driver.Driver.givenName}{\" \"}\n                              <b>{driver.Driver.familyName.toUpperCase()}</b>\n                            </Col>\n                            <Col className=\"showXS\">\n                              <b>{driver.Driver.familyName.toUpperCase()}</b>\n                            </Col>\n                          </Row>\n                          <Row>\n                            <Col style={{ fontSize: \"13px\" }}>\n                              {driver.Constructor.name}\n                            </Col>\n                          </Row>\n                        </Col>\n                      </Row>\n                    </td>\n                    <td>+{driver.points}</td>\n                  </tr>\n                )\n              )}\n            </tbody>\n          </Table>\n          <h4>\n            <b>Fastest lap / Pole position</b>\n          </h4>\n          <Table responsive>\n            <tbody>\n              {fastestLap === null ? null : (\n                <tr className=\"align-middle\">\n                  <td>FL</td>\n                  <td>\n                    <Row>\n                      <Col xs={2} className=\"align-self-center\">\n                        <CircleFlag\n                          countryCode={CountriesCodeNationality[\n                            fastestLap.Driver.nationality\n                          ].toLowerCase()}\n                          height={20}\n                        />\n                      </Col>\n                      <Col xs={1}>\n                        <TeamColor\n                          constructorId={fastestLap.Constructor.constructorId}\n                          height=\"42px\"\n                        />\n                      </Col>\n                      <Col xs={8} className=\"text-start\">\n                        <Row>\n                          <Col className=\"hideXS\">\n                            {fastestLap.Driver.givenName}{\" \"}\n                            <b>{fastestLap.Driver.familyName.toUpperCase()}</b>\n                          </Col>\n                          <Col className=\"showXS\">\n                            <b>{fastestLap.Driver.familyName.toUpperCase()}</b>\n                          </Col>\n                        </Row>\n                        <Row>\n                          <Col style={{ fontSize: \"13px\" }}>\n                            {fastestLap.Constructor.name}\n                          </Col>\n                        </Row>\n                      </Col>\n                    </Row>\n                  </td>\n                  <td>{fastestLap.FastestLap.Time.time}</td>\n                </tr>\n              )}\n              {loadingPolePosition ? null : (\n                <tr className=\"align-middle\">\n                  <td>PP</td>\n                  <td>\n                    <Row>\n                      <Col xs={2} className=\"align-self-center\">\n                        <CircleFlag\n                          countryCode={CountriesCodeNationality[\n                            polePosition.Driver.nationality\n                          ].toLowerCase()}\n                          height={20}\n                        />\n                      </Col>\n                      <Col xs={1}>\n                        <TeamColor\n                          constructorId={polePosition.Constructor.constructorId}\n                          height=\"42px\"\n                        />\n                      </Col>\n                      <Col xs={8} className=\"text-start\">\n                        <Row>\n                          <Col className=\"hideXS\">\n                            {polePosition.Driver.givenName}{\" \"}\n                            <b>\n                              {polePosition.Driver.familyName.toUpperCase()}\n                            </b>\n                          </Col>\n                          <Col className=\"showXS\">\n                            <b>\n                              {polePosition.Driver.familyName.toUpperCase()}\n                            </b>\n                          </Col>\n                        </Row>\n                        <Row>\n                          <Col style={{ fontSize: \"13px\" }}>\n                            {polePosition.Constructor.name}\n                          </Col>\n                        </Row>\n                      </Col>\n                    </Row>\n                  </td>\n                  <td>{polePosition.Q3}</td>\n                </tr>\n              )}\n            </tbody>\n          </Table>\n        </div>\n      }\n      cardFooter={\n        <h4>\n          Round: {lastRace.MRData.RaceTable.round} / {numberOfRaces}\n        </h4>\n      }\n      cardHeight=\"34rem\"\n      variant=\"light\"\n    />\n  );\n};\n\nexport default PreviousRaceStats;\n","import React from \"react\";\nimport GenericCard from \"../../Cards/GenericCard\";\nimport DriversStandings from \"../Standings/DriversStandings\";\n\nconst DriversStandingsCard = ({ driversStandings }) => {\n  return (\n    <GenericCard\n      cardTitle=\"Drivers' standings\"\n      cardBody={\n        <DriversStandings\n          style={{\n            overflow: \"hidden\",\n            overflowY: \"scroll\",\n            height: \"480px\",\n          }}\n          driversStandings={driversStandings}\n        />\n      }\n      cardHeight=\"34rem\"\n      variant=\"light\"\n    />\n  );\n};\n\nexport default DriversStandingsCard;\n","import React from \"react\";\nimport GenericCard from \"../../Cards/GenericCard\";\nimport ConstructorsStandings from \"../Standings/ConstructorsStandings\";\n\nconst ConstructorsStandingsCard = ({ constructorsStandings }) => {\n  return (\n    <GenericCard\n      cardTitle=\"Constructors' standings\"\n      cardBody={\n        <ConstructorsStandings constructorsStandings={constructorsStandings} />\n      }\n      cardHeight=\"34rem\"\n      variant=\"light\"\n    />\n  );\n};\n\nexport default ConstructorsStandingsCard;\n","import React, { useState, useEffect } from \"react\";\nimport Row from \"react-bootstrap/Row\";\nimport Col from \"react-bootstrap/Col\";\nimport Container from \"react-bootstrap/Container\";\nimport PreviousRaceCard from \"../MainFeed/PreviousRaceCard\";\nimport NextRaceCard from \"./NextRaceCard\";\nimport Spinner from \"react-bootstrap/Spinner\";\nimport PreviousRaceStats from \"./PreviousRaceStats\";\nimport DriversStandingsCard from \"./DriversStandingsCard\";\nimport ConstructorsStandingsCard from \"./ConstructorsStandingsCard\";\n\nconst MainFeed = () => {\n  const TOTAL_NUMBER_OF_RACES = \"23\";\n  const [nextRace, setNextRace] = useState(null);\n  const [lastRace, setLastRace] = useState(null);\n  const [driversStandings, setDriversStandings] = useState(null);\n  const [loadingNextRace, setLoadingNextRace] = useState(true);\n  const [loadingLastRace, setLoadingLastRace] = useState(true);\n  const [constructorsStandings, setConstructorsStandings] = useState(null);\n  const [loadingTeamsStandings, setLoadingTeamsStandings] = useState(true);\n  const [loadingDriversStandings, setLoadingDriversStandings] = useState(true);\n\n  useEffect(() => {\n    const fetchPreviousRaceResult = async () => {\n      await fetch(`https://ergast.com/api/f1/current/last/results.json`)\n        .then((res) => res.json())\n        .then((result) => {\n          setLastRace(result);\n          setLoadingLastRace(false);\n        });\n    };\n\n    const fetchNextRaceData = async (round) => {\n      await fetch(`https://ergast.com/api/f1/current/next.json`)\n        .then((res) => res.json())\n        .then((result) => {\n          setNextRace(result.MRData.RaceTable.Races[0]);\n          setLoadingNextRace(false);\n        });\n    };\n\n    const fetchConstructorsStandings = async () => {\n      await fetch(`https://ergast.com/api/f1/current/constructorStandings.json`)\n        .then((res) => res.json())\n        .then((result) => {\n          setConstructorsStandings(\n            result.MRData.StandingsTable.StandingsLists[0].ConstructorStandings\n          );\n          setLoadingTeamsStandings(false);\n        });\n    };\n\n    const fetchDriversStandings = async () => {\n      await fetch(`https://ergast.com/api/f1/current/driverStandings.json`)\n        .then((res) => res.json())\n        .then((result) => {\n          setDriversStandings(\n            result.MRData.StandingsTable.StandingsLists[0].DriverStandings\n          );\n          setLoadingDriversStandings(false);\n        });\n    };\n\n    fetchPreviousRaceResult();\n    fetchNextRaceData();\n    fetchDriversStandings();\n    fetchConstructorsStandings();\n  }, []);\n\n  const cardsSpacing = {\n    marginBottom: \"10px\",\n  };\n\n  return (\n    <Container style={{ minHeight: \"500px\" }}>\n      <Row className=\"justify-content-center text-center\">\n        <Col md=\"auto\">\n          <h1 style={{ marginBottom: \"3%\" }}>\n            {loadingLastRace ? null : lastRace.MRData.RaceTable.season} Formula\n            One\n          </h1>\n        </Col>\n      </Row>\n      {loadingLastRace || loadingNextRace ? (\n        <Row className=\"justify-content-center text-center\">\n          <Spinner animation=\"border\" />\n        </Row>\n      ) : (\n        <Row className=\"justify-content-center text-center\">\n          <Col lg={12} style={cardsSpacing}>\n            <NextRaceCard nextRace={nextRace} />\n          </Col>\n          <Col xs={12} lg={6} style={cardsSpacing}>\n            <PreviousRaceCard lastRace={lastRace} />\n          </Col>\n          <Col xs={12} lg={6} style={cardsSpacing}>\n            <PreviousRaceStats\n              lastRace={lastRace}\n              numberOfRaces={TOTAL_NUMBER_OF_RACES}\n            />\n          </Col>\n        </Row>\n      )}\n      {loadingDriversStandings || loadingTeamsStandings ? null : (\n        <Row>\n          <Col style={cardsSpacing}>\n            <DriversStandingsCard driversStandings={driversStandings} />\n          </Col>\n          <Col style={cardsSpacing}>\n            <ConstructorsStandingsCard\n              constructorsStandings={constructorsStandings}\n            />\n          </Col>\n        </Row>\n      )}\n    </Container>\n  );\n};\n\nexport default MainFeed;\n","import React from \"react\";\nimport \"react-circular-progressbar/dist/styles.css\";\nimport NavBar from \"../components/Navbar/Navbar\";\nimport Footer from \"../components/Footer/Footer\";\nimport MainFeed from \"../components/Stats/MainFeed/MainFeed\";\n\nconst HomePage = () => {\n  return (\n    <div>\n      <NavBar />\n      <MainFeed />\n      <Footer />\n    </div>\n  );\n};\n\nexport default HomePage;\n","export const CountriesCodeNationality = {\n  British: \"GB\",\n  Finnish: \"FI\",\n  Dutch: \"NL\",\n  Mexican: \"MX\",\n  Spanish: \"ES\",\n  Australian: \"AU\",\n  Monegasque: \"MC\",\n  French: \"FR\",\n  German: \"DE\",\n  Japanese: \"JP\",\n  Canadian: \"CA\",\n  Italian: \"IT\",\n  Russian: \"RU\",\n  Austrian: \"AT\",\n  Swiss: \"CH\",\n  American: \"US\",\n  Thai: \"TH\",\n  \"New Zealander\": \"NZ\",\n  \"New Zealand\": \"NZ\",\n  Swedish: \"SE\",\n  Portuguese: \"PT\",\n  Brazilian: \"BR\",\n  Hungarian: \"HU\",\n  Argentine: \"AR\",\n  Belgian: \"BE\",\n  Belgium: \"BE\",\n  \"South African\": \"ZA\",\n  Danish: \"DN\",\n  Liechtensteiner: \"LI\",\n  \"Hong Kong\": \"HK\",\n  Irish: \"IE\",\n  Chilean: \"CL\",\n  Venezuelan: \"VE\",\n  Colombian: \"CO\",\n  Czech: \"CZ\",\n  Malaysian: \"MY\",\n  Indian: \"IN\",\n  Polish: \"PL\",\n  Indonesian: \"ID\",\n  Rhodesian: \"ZW\",\n  Russia: \"RU\",\n  Korea:  \"KR\"\n};\n","export const TeamColors = {\n  red_bull: \"#0000FF\",\n  williams: \"#1E90FF\",\n  mercedes: \"#7FFFD4\",\n  mclaren: \"#FFA500\",\n  aston_martin: \"#008000\",\n  alphatauri: \"#778899\",\n  alpine: \"#4169E1\",\n  ferrari: \"#FF0000\",\n  haas: \"#FFFFFF\",\n  alfa: \"#8B0000\",\n  renault: \"#FFFF00\",\n  racing_point: \"#FFC0CB\"\n};\n","import React from \"react\";\nimport { TeamColors } from \"../../data/TeamColors\";\n\nconst TeamColor = ({ constructorId, height = \"27px\" }) => {\n  return (\n    <div\n      style={{\n        width: \"3px\",\n        height: height,\n        backgroundColor: TeamColors.hasOwnProperty(constructorId)\n          ? TeamColors[constructorId]\n          : \"#000000\",\n      }}\n    />\n  );\n};\n\nexport default TeamColor;\n","export function getLocalRaceDate(date, time) {\n  const raceDate = new Date(date + \"T\" + time);\n  const hours = (raceDate.getHours() < 10 ? \"0\" : \"\") + raceDate.getHours();\n  const minutes =\n    (raceDate.getMinutes() < 10 ? \"0\" : \"\") + raceDate.getMinutes();\n\n  return hours + \":\" + minutes + \":00\";\n}\n"],"sourceRoot":""}