{"version":3,"sources":["components/Navbar/Navbar.js","components/Footer/Footer.js","components/Cards/GenericCard.js","data/CountryCodeNationality.js","data/TeamColors.js","components/Stats/Standings/DriversStandings.js","components/Stats/Standings/ConstructorsStandings.js","components/Stats/MainFeed/PreviousRaceCard.js","components/Stats/MainFeed/NextRaceCard.js","components/Stats/MainFeed/StandingsCard.js","components/Stats/MainFeed/PreviousRaceStats.js","components/Stats/MainFeed/MainFeed.js","pages/HomePage.js","components/Stats/Classifications/RaceClassification.js","components/Stats/Classifications/RaceQualifying.js","components/Stats/RaceData/Podium.js","components/Stats/RaceData/RaceTab.js","components/Map/Map.js","components/Stats/RaceData/CircuitData.js","components/Stats/RaceData/CircuitTab.js","components/Stats/RaceData/EventTabs.js","components/Stats/RaceData/RaceCountdown.js","components/Stats/RaceData/Race.js","pages/RaceResult.js","components/Races/RaceInfo.js","components/Races/Races.js","pages/SeasonRaces.js","components/Error/Error.js","pages/ErrorPage.js","components/Stats/Standings/Standings.js","pages/StandingsPage.js","App.js","reportWebVitals.js","index.js"],"names":["NavBar","Navbar","className","bg","variant","Container","Brand","size","to","style","textDecoration","Collapse","href","Footer","Row","xs","id","Col","md","textAlign","GenericCard","cardTitle","cardBody","cardFooter","cardHeight","Card","height","text","Header","Body","undefined","CountriesCodeNationality","British","Finnish","Dutch","Mexican","Spanish","Australian","Monegasque","French","German","Japanese","Canadian","Italian","Russian","Austrian","Swiss","American","Thai","Swedish","Portuguese","Brazilian","Hungarian","Argentine","Belgian","Belgium","Danish","Liechtensteiner","Irish","Chilean","Venezuelan","Colombian","Czech","Malaysian","Indian","Polish","Indonesian","Rhodesian","TeamColors","red_bull","williams","mercedes","mclaren","aston_martin","alphatauri","alpine","ferrari","haas","alfa","renault","racing_point","DriversStandings","driversStandings","Table","responsive","map","driver","index","position","Driver","permanentNumber","countryCode","nationality","toLowerCase","width","backgroundColor","hasOwnProperty","Constructors","constructorId","givenName","familyName","code","substring","toUpperCase","name","wins","points","ConstructorsStandings","constructorsStandings","constructor","Constructor","PreviousRaceCard","previousRaceData","useState","setCountryCode","loadingCountryCode","setLoadingCountryCode","useEffect","a","fetch","MRData","RaceTable","Races","Circuit","Location","country","response","json","data","alpha2Code","fetchCountryCode","round","raceName","circuitName","date","season","Button","NextRaceCard","nextRaceData","time","length","Date","now","getTime","split","renderer","days","hours","minutes","seconds","marginTop","sm","lg","StandingsCard","type","standings","PreviousRaceStats","totalNumberOfRaces","fastestLap","setFastestLap","polePosition","setPolePosition","loadingPolePosition","setLoadingPolePosition","QualifyingResults","fetchPolePosition","bestLap","forEach","lap","Results","FastestLap","Time","getFastestLap","slice","AverageSpeed","speed","Q3","MainFeed","setNextRaceData","setDriversStandings","previousRaceResult","setPreviousRaceResult","setTotalNumberOfRaces","setConstructorsStandings","loadingNextRaceData","setLoadingNextRaceData","loadingPreviousRaceResult","setLoadingPreviousRaceResult","loadingConstructorsStandings","setLoadingConstructorsStandings","loadingDriversStandings","setLoadingDriversStandings","fetchPreviousRaceResult","fetchNextRaceData","parseInt","fetchConstructorsStandings","StandingsTable","StandingsLists","ConstructorStandings","fetchDriversStandings","DriverStandings","minHeight","marginBottom","Spinner","animation","overflow","overflowY","HomePage","RaceClassification","raceClassification","number","laps","status","rank","RaceQualifying","raceQualifying","Q1","Q2","Podium","eventClassification","span","order","RaceTab","raceInfo","eventCountryCode","raceDate","getHours","getMinutes","getLocalRaceDate","Map","coordinates","setMap","setInterval","invalidateSize","MapContainer","center","zoom","scrollWheelZoom","whenCreated","TileLayer","attribution","url","Marker","Popup","circuitId","firstGrandPrix","setFirstGrandPrix","loadingFastestLap","setLoadingFastestLap","loadingFirstGrandPrix","setLoadingFirstGrandPrix","then","res","CircuitTab","locality","lat","long","mapHeight","EventTabs","setEventCountryCode","ok","catch","error","Tabs","defaultActiveKey","Tab","eventKey","title","RaceCountdown","setRaceInfo","loadingRaceInfo","setLoadingRaceInfo","fetchRaceInfo","fluid","Race","setRaceClassification","setRaceQualifying","loadingRaceResult","setLoadingRaceResult","loadingRaceQualifying","setLoadingRaceQualifying","fetchRaceResult","fetchRaceQualifying","RaceResult","useParams","RaceInfo","race","loadigCountryCode","Alert","setSeason","seasonSchedule","setSeasonSchedule","seasonsYearsList","setSeasonsYearsList","loadingSeasonSchedule","setLoadingSchedule","start","end","fetchSeasonSchedule","getFullYear","Array","fill","_","i","reverse","Dropdown","Toggle","Menu","Item","onClick","e","target","textContent","ListGroup","SeasonSchedule","Error","ErrorPage","Standings","maxHeight","StandingsPage","App","basename","path","exact","component","SeasonRaces","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.0abab76e.chunk.js","sourcesContent":["import React from \"react\";\nimport Container from \"react-bootstrap/Container\";\nimport Navbar from \"react-bootstrap/Navbar\";\nimport \"./Navbar.css\";\nimport { Link } from \"react-router-dom\";\nimport { AiFillGithub } from \"react-icons/ai\";\nimport { GiCheckeredFlag } from \"react-icons/gi\";\n\nconst NavBar = () => {\n  return (\n    <Navbar className=\"navbar\" bg=\"dark\" variant=\"dark\">\n      <Container>\n        <Navbar.Brand>\n          <GiCheckeredFlag size={30} />\n        </Navbar.Brand>\n        <Link to=\"/\" style={{ textDecoration: \"none\" }}>\n          <Navbar.Brand>Home</Navbar.Brand>\n        </Link>\n        <Link to=\"/schedule\" style={{ textDecoration: \"none\" }}>\n          <Navbar.Brand>Races</Navbar.Brand>\n        </Link>\n        <Link to=\"/standings\" style={{ textDecoration: \"none\" }}>\n          <Navbar.Brand>Standings</Navbar.Brand>\n        </Link>\n        <Navbar.Collapse className=\"justify-content-end\">\n          <Navbar.Brand href=\"https://github.com/jdro10\">\n            <AiFillGithub size={25} />\n          </Navbar.Brand>\n        </Navbar.Collapse>\n      </Container>\n    </Navbar>\n  );\n};\n\nexport default NavBar;\n","import React from \"react\";\nimport \"./Footer.css\";\nimport Container from \"react-bootstrap/Container\";\nimport Row from \"react-bootstrap/Row\";\nimport Col from \"react-bootstrap/Col\";\nimport { GiCheckeredFlag } from \"react-icons/gi\";\nimport { FaGithub } from \"react-icons/fa\";\nimport { FaReact } from \"react-icons/fa\";\nimport { IoLogoJavascript } from \"react-icons/io\";\nimport { BsBootstrap } from \"react-icons/bs\";\nimport { SiVisualstudiocode } from \"react-icons/si\";\nimport { IoLogoNpm } from \"react-icons/io\";\nimport { FaHtml5 } from \"react-icons/fa\";\nimport { FaCss3Alt } from \"react-icons/fa\";\nimport { SiLeaflet } from \"react-icons/si\";\n\nconst Footer = () => {\n  return (\n    <footer>\n      <Container>\n        <Row className=\"justify-content-center text-center\" xs=\"auto\" id=\"row\">\n          <Col>\n            <GiCheckeredFlag size={40} />\n          </Col>\n          <Col>\n            <FaGithub size={40} />\n          </Col>\n          <Col>\n            <FaReact size={40} />\n          </Col>\n          <Col>\n            <IoLogoJavascript size={40} />\n          </Col>\n          <Col>\n            <FaHtml5 size={40} />\n          </Col>\n          <Col>\n            <FaCss3Alt size={40} />\n          </Col>\n          <Col>\n            <BsBootstrap size={40} />\n          </Col>\n          <Col>\n            <SiLeaflet size={40} />\n          </Col>\n          <Col>\n            <IoLogoNpm size={40} />\n          </Col>\n          <Col>\n            <SiVisualstudiocode size={40} />\n          </Col>\n        </Row>\n        <Row className=\"justify-content-md-center\" xs=\"auto\" id=\"lastRow\">\n          <Col>\n            <p id=\"author\"></p>\n          </Col>\n        </Row>\n        <Row className=\"justify-content-md-center\">\n          <Col md=\"auto\" style={{ textAlign: \"center\" }}>\n            <h5>API</h5>\n          </Col>\n        </Row>\n        <Row className=\"justify-content-md-center\">\n          <Col md=\"auto\" style={{ textAlign: \"center\" }}>\n            All racing data is obtained through{\" \"}\n            <a href=\"http://ergast.com/mrd/\">Ergast API</a>.\n          </Col>\n        </Row>\n        <Row className=\"justify-content-md-center\">\n          <Col md=\"auto\" style={{ textAlign: \"center\" }}>\n            Countries data is obtained through{\" \"}\n            <a href=\"https://restcountries.eu/\">REST Countries API</a>.\n          </Col>\n        </Row>\n        <br />\n        <Row className=\"justify-content-md-center\">\n          <Col md=\"auto\" style={{ textAlign: \"center\" }}>\n            <h5>Disclaimer</h5>\n          </Col>\n        </Row>\n        <Row className=\"justify-content-md-center\">\n          <Col md=\"auto\" style={{ textAlign: \"center\" }}>\n            This website was developed for learning and educational purposes\n            only.\n          </Col>\n        </Row>\n        <Row className=\"justify-content-md-center\">\n          <Col md=\"auto\" style={{ textAlign: \"center\" }}>\n            Data displayed may be inaccurate. By using this website you\n            acknowledge this.\n          </Col>\n        </Row>\n        <Row className=\"justify-content-md-center\">\n          <Col md=\"auto\" style={{ textAlign: \"center\" }}>\n            The author disclaims all responsibility for any loss or damage\n            arising from the use of this website.\n          </Col>\n        </Row>\n        <br />\n        <Row className=\"justify-content-md-center\">\n          <Col md={7}>\n            <p style={{ textAlign: \"center\" }}>\n              This website is unofficial and is not associated in any way with\n              the Formula 1 companies. F1, FORMULA ONE, FORMULA 1, FIA FORMULA\n              ONE WORLD CHAMPIONSHIP, GRAND PRIX and related marks are trade\n              marks of Formula One Licensing B.V.\n            </p>\n          </Col>\n        </Row>\n      </Container>\n    </footer>\n  );\n};\n\nexport default Footer;\n","import React from \"react\";\nimport Card from \"react-bootstrap/Card\";\nimport Row from \"react-bootstrap/Row\";\n\nconst GenericCard = ({\n  cardTitle,\n  cardBody,\n  cardFooter,\n  cardHeight,\n  variant,\n}) => {\n  return (\n    <Card\n      style={{ height: cardHeight }}\n      className=\"text-center\"\n      bg={variant}\n      text={variant === \"light\" ? \"dark\" : \"white\"}\n    >\n      <Card.Header>\n        <b>{cardTitle}</b>\n      </Card.Header>\n      <Card.Body>\n        <Card.Body>\n          <Row className=\"justify-content-md-center\">{cardBody}</Row>\n        </Card.Body>\n      </Card.Body>\n      {cardFooter !== undefined ? <Card.Footer>{cardFooter}</Card.Footer> : \"\"}\n    </Card>\n  );\n};\n\nexport default GenericCard;\n","export const CountriesCodeNationality = {\n  British: \"GB\",\n  Finnish: \"FI\",\n  Dutch: \"NL\",\n  Mexican: \"MX\",\n  Spanish: \"ES\",\n  Australian: \"AU\",\n  Monegasque: \"MC\",\n  French: \"FR\",\n  German: \"DE\",\n  Japanese: \"JP\",\n  Canadian: \"CA\",\n  Italian: \"IT\",\n  Russian: \"RU\",\n  Austrian: \"AT\",\n  Swiss: \"CH\",\n  American: \"US\",\n  Thai: \"TH\",\n  \"New Zealander\": \"NZ\",\n  \"New Zealand\": \"NZ\",\n  Swedish: \"SE\",\n  Portuguese: \"PT\",\n  Brazilian: \"BR\",\n  Hungarian: \"HU\",\n  Argentine: \"AR\",\n  Belgian: \"BE\",\n  Belgium: \"BE\",\n  \"South African\": \"ZA\",\n  Danish: \"DN\",\n  Liechtensteiner: \"LI\",\n  \"Hong Kong\": \"HK\",\n  Irish: \"IE\",\n  Chilean: \"CL\",\n  Venezuelan: \"VE\",\n  Colombian: \"CO\",\n  Czech: \"CZ\",\n  Malaysian: \"MY\",\n  Indian: \"IN\",\n  Polish: \"PL\",\n  Indonesian: \"ID\",\n  Rhodesian: \"ZW\"\n};\n","export const TeamColors = {\n  red_bull: \"#0000FF\",\n  williams: \"#1E90FF\",\n  mercedes: \"#7FFFD4\",\n  mclaren: \"#FFA500\",\n  aston_martin: \"#008000\",\n  alphatauri: \"#778899\",\n  alpine: \"#4169E1\",\n  ferrari: \"#FF0000\",\n  haas: \"#FFFFFF\",\n  alfa: \"#8B0000\",\n  renault: \"#FFFF00\",\n  racing_point: \"#FFC0CB\"\n};\n","import React from \"react\";\nimport Table from \"react-bootstrap/Table\";\nimport { CircleFlag } from \"react-circle-flags\";\nimport { CountriesCodeNationality } from \"../../../data/CountryCodeNationality\";\nimport Row from \"react-bootstrap/Row\";\nimport Col from \"react-bootstrap/Col\";\nimport \"../Styles/Table.css\";\nimport { TeamColors } from \"../../../data/TeamColors\";\n\nconst DriversStandings = ({ style, driversStandings }) => {\n  return (\n    <div style={style}>\n      <Table responsive=\"xs\">\n        <thead>\n          <tr>\n            <th>Pos</th>\n            <th className=\"hideXS\">No</th>\n            <th>Name</th>\n            <th>Team</th>\n            <th className=\"hideXS\">Wins</th>\n            <th>Points</th>\n          </tr>\n        </thead>\n        <tbody>\n          {driversStandings.map((driver, index) => (\n            <tr key={index}>\n              <td>{driver.position}</td>\n              <td className=\"hideXS\">{driver.Driver.permanentNumber}</td>\n              <td>\n                <Row className=\"justify-content-center text-center\">\n                  <Col xs={4} md={2}>\n                    <CircleFlag\n                      countryCode={CountriesCodeNationality[\n                        driver.Driver.nationality\n                      ].toLowerCase()}\n                      height={20}\n                    />\n                  </Col>\n                  <Col xs={4} md={2}>\n                    <div\n                      style={{\n                        width: \"7px\",\n                        height: \"25px\",\n                        backgroundColor: TeamColors.hasOwnProperty(\n                          driver.Constructors[0].constructorId\n                        )\n                          ? TeamColors[driver.Constructors[0].constructorId]\n                          : \"#000000\",\n                      }}\n                    />\n                  </Col>\n                  <Col className=\"hideXS\" md={8}>\n                    {driver.Driver.givenName + \" \" + driver.Driver.familyName}\n                  </Col>\n                  <Col className=\"showXS\" xs={10}>\n                    {!driver.Driver.hasOwnProperty(\"code\")\n                      ? driver.Driver.familyName.substring(0, 3).toUpperCase()\n                      : driver.Driver.code}\n                  </Col>\n                </Row>\n              </td>\n              <td>{driver.Constructors[0].name}</td>\n              <td className=\"hideXS\">{driver.wins}</td>\n              <td>{driver.points}</td>\n            </tr>\n          ))}\n        </tbody>\n      </Table>\n    </div>\n  );\n};\n\nexport default DriversStandings;\n","import React from \"react\";\nimport Table from \"react-bootstrap/Table\";\nimport { CircleFlag } from \"react-circle-flags\";\nimport { CountriesCodeNationality } from \"../../../data/CountryCodeNationality\";\nimport Row from \"react-bootstrap/Row\";\nimport Col from \"react-bootstrap/Col\";\nimport \"../Styles/Table.css\";\nimport { TeamColors } from \"../../../data/TeamColors\";\n\nconst ConstructorsStandings = ({ style, constructorsStandings }) => {\n  return (\n    <div style={style}>\n      {constructorsStandings !== null ? (\n        <Table responsive=\"sm\">\n          <thead>\n            <tr>\n              <th>Pos</th>\n              <th>Name</th>\n              <th className=\"hideXS\">Wins</th>\n              <th>Points</th>\n            </tr>\n          </thead>\n          <tbody>\n            {constructorsStandings.map((constructor, index) => (\n              <tr key={index}>\n                <td>{constructor.position}</td>\n                <td>\n                  <Row>\n                    <Col xs={4}>\n                      <CircleFlag\n                        countryCode={CountriesCodeNationality[\n                          constructor.Constructor.nationality\n                        ].toLowerCase()}\n                        height={20}\n                      />\n                    </Col>\n                    <Col xs={2}>\n                      <div\n                        style={{\n                          width: \"7px\",\n                          height: \"25px\",\n                          backgroundColor: TeamColors.hasOwnProperty(\n                            constructor.Constructor.constructorId\n                          )\n                            ? TeamColors[constructor.Constructor.constructorId]\n                            : \"#000000\",\n                        }}\n                      />\n                    </Col>\n                    <Col xs={6}>{constructor.Constructor.name}</Col>\n                  </Row>\n                </td>\n                <td className=\"hideXS\">{constructor.wins}</td>\n                <td>{constructor.points}</td>\n              </tr>\n            ))}\n          </tbody>\n        </Table>\n      ) : (\n        <Row className=\"justify-content-center text-center\">\n          <Col md=\"auto\">\n            <h3>\n              There's no constructors' standings data available for this season.\n            </h3>\n            <br />\n          </Col>\n        </Row>\n      )}\n    </div>\n  );\n};\n\nexport default ConstructorsStandings;\n","import React, { useState, useEffect } from \"react\";\nimport GenericCard from \"../../Cards/GenericCard\";\nimport { Link } from \"react-router-dom\";\nimport { CircleFlag } from \"react-circle-flags\";\nimport Button from \"react-bootstrap/Button\";\n\nconst PreviousRaceCard = ({ previousRaceData }) => {\n  const [countryCode, setCountryCode] = useState(null);\n  const [loadingCountryCode, setLoadingCountryCode] = useState(true);\n\n  useEffect(() => {\n    const fetchCountryCode = async () => {\n      const response = await fetch(\n        `https://restcountries.eu/rest/v2/name/${previousRaceData.MRData.RaceTable.Races[0].Circuit.Location.country}?fullText=true`\n      );\n      const data = await response.json();\n\n      setCountryCode(data[0].alpha2Code);\n      setLoadingCountryCode(false);\n    };\n\n    fetchCountryCode();\n  }, [previousRaceData.MRData.RaceTable.Races]);\n\n  return (\n    <GenericCard\n      cardTitle={\"Previous race\"}\n      cardBody={\n        <div>\n          <h5>Round {previousRaceData.MRData.RaceTable.round}</h5>\n          <h1>{previousRaceData.MRData.RaceTable.Races[0].raceName}</h1>\n          <h5>\n            {previousRaceData.MRData.RaceTable.Races[0].Circuit.circuitName}\n          </h5>\n          <h6>{previousRaceData.MRData.RaceTable.Races[0].date}</h6>\n          {loadingCountryCode ? (\n            \"\"\n          ) : (\n            <div>\n              <br></br>\n              <CircleFlag\n                countryCode={countryCode.toLowerCase()}\n                height={120}\n              />\n            </div>\n          )}\n        </div>\n      }\n      cardFooter={\n        <Link\n          to={\n            \"/race/\" +\n            previousRaceData.MRData.RaceTable.season +\n            \"/\" +\n            previousRaceData.MRData.RaceTable.round\n          }\n        >\n          <Button variant=\"dark\">Full race result</Button>\n        </Link>\n      }\n      cardHeight=\"30rem\"\n      variant={\"light\"}\n    ></GenericCard>\n  );\n};\n\nexport default PreviousRaceCard;\n","import React, { useState, useEffect } from \"react\";\nimport GenericCard from \"../../Cards/GenericCard\";\nimport { Link } from \"react-router-dom\";\nimport { CircleFlag } from \"react-circle-flags\";\nimport Button from \"react-bootstrap/Button\";\nimport Countdown from \"react-countdown\";\nimport Row from \"react-bootstrap/Row\";\nimport Col from \"react-bootstrap/Col\";\n\nconst NextRaceCard = ({ nextRaceData }) => {\n  const [countryCode, setCountryCode] = useState(null);\n  const [loadingCountryCode, setLoadingCountryCode] = useState(true);\n\n  useEffect(() => {\n    const fetchCountryCode = async () => {\n      const response = await fetch(\n        `https://restcountries.eu/rest/v2/name/${nextRaceData.Circuit.Location.country}?fullText=true`\n      );\n      const data = await response.json();\n\n      setCountryCode(data[0].alpha2Code);\n      setLoadingCountryCode(false);\n    };\n\n    fetchCountryCode();\n  }, [nextRaceData.Circuit.Location.country]);\n\n  const renderer = ({ days, hours, minutes, seconds }) => {\n    return (\n      <Row\n        style={{ marginTop: \"1%\" }}\n        className=\"justify-content-center text-center\"\n      >\n        <Col xs={3} sm={2} lg={1}>\n          <h1>{days}</h1>\n          <h5>days</h5>\n        </Col>\n        <Col xs={3} sm={2} lg={1}>\n          <h1>{hours}</h1>\n          <h5>hours</h5>\n        </Col>\n        <Col xs={3} sm={2} lg={1}>\n          <h1>{minutes}</h1>\n          <h5>min.</h5>\n        </Col>\n        <Col xs={3} sm={2} lg={1}>\n          <h1>{seconds}</h1>\n          <h5>sec.</h5>\n        </Col>\n      </Row>\n    );\n  };\n\n  return (\n    <GenericCard\n      cardTitle=\"Next race\"\n      cardBody={\n        <div>\n          <h5>Round {nextRaceData.round}</h5>\n          <h1>{nextRaceData.raceName}</h1>\n          <h6>\n            {nextRaceData.Circuit.circuitName +\n              \" | \" +\n              nextRaceData.date +\n              \" | \" +\n              nextRaceData.time.substring(0, nextRaceData.time.length - 1)}\n          </h6>\n          {loadingCountryCode ? (\n            \"\"\n          ) : (\n            <CircleFlag countryCode={countryCode.toLowerCase()} height={100} />\n          )}\n          <div>\n            <Countdown\n              date={\n                Date.now() +\n                (new Date(nextRaceData.date).getTime() +\n                  nextRaceData.time.split(\":\")[0] * 3600000 -\n                  new Date().getTime())\n              }\n              renderer={renderer}\n            />\n          </div>\n        </div>\n      }\n      cardFooter={\n        <Link to={\"/race/\" + nextRaceData.season + \"/\" + nextRaceData.round}>\n          <Button variant=\"dark\">Race information</Button>\n        </Link>\n      }\n      cardHeight=\"30rem\"\n      variant={\"light\"}\n    ></GenericCard>\n  );\n};\n\nexport default NextRaceCard;\n","import React from \"react\";\nimport GenericCard from \"../../Cards/GenericCard\";\n\nconst StandingsCard = ({ type, standings }) => {\n  return (\n    <GenericCard\n      cardTitle={type + \" standings\"}\n      cardBody={standings}\n      cardHeight=\"27rem\"\n      variant={\"light\"}\n    ></GenericCard>\n  );\n};\n\nexport default StandingsCard;\n","import React, { useState, useEffect } from \"react\";\nimport GenericCard from \"../../Cards/GenericCard\";\nimport { CountriesCodeNationality } from \"../../../data/CountryCodeNationality\";\nimport { CircleFlag } from \"react-circle-flags\";\nimport Table from \"react-bootstrap/Table\";\nimport { TeamColors } from \"../../../data/TeamColors\";\nimport \"../Styles/Table.css\";\n\nconst PreviousRaceStats = ({ previousRaceData, totalNumberOfRaces }) => {\n  const [fastestLap, setFastestLap] = useState(null);\n  const [polePosition, setPolePosition] = useState(null);\n  const [loadingPolePosition, setLoadingPolePosition] = useState(true);\n\n  useEffect(() => {\n    const getFastestLap = () => {\n      let bestLap = previousRaceData.MRData.RaceTable.Races[0];\n\n      previousRaceData.MRData.RaceTable.Races.forEach((lap) => {\n        if (lap.Results[0].FastestLap === undefined) {\n          setFastestLap(null);\n          return;\n        } else {\n          if (\n            lap.Results[0].FastestLap.Time.time <\n            bestLap.Results[0].FastestLap.Time.time\n          ) {\n            bestLap = lap;\n          }\n        }\n\n        setFastestLap(bestLap);\n      });\n    };\n\n    const fetchPolePosition = async () => {\n      const response = await fetch(\n        `https://ergast.com/api/f1/${previousRaceData.MRData.RaceTable.season}/${previousRaceData.MRData.RaceTable.round}/qualifying.json`\n      );\n      const data = await response.json();\n\n      setPolePosition(data.MRData.RaceTable.Races[0].QualifyingResults[0]);\n      setLoadingPolePosition(false);\n    };\n\n    fetchPolePosition();\n    getFastestLap();\n  }, [\n    previousRaceData.MRData.RaceTable.season,\n    previousRaceData.MRData.RaceTable.round,\n    previousRaceData.MRData.RaceTable.Races,\n  ]);\n\n  return (\n    <GenericCard\n      cardTitle={\n        \"Previous race: \" + previousRaceData.MRData.RaceTable.Races[0].raceName\n      }\n      cardBody={\n        <div>\n          <h4>\n            <b>Race result</b>\n          </h4>\n          <Table responsive>\n            <tbody className=\"justify-content-center\">\n              {previousRaceData.MRData.RaceTable.Races[0].Results.slice(\n                0,\n                3\n              ).map((driver, index) => (\n                <tr key={index}>\n                  <td>{driver.position}</td>\n                  <td>\n                    <div\n                      style={{\n                        width: \"7px\",\n                        height: \"25px\",\n                        backgroundColor: TeamColors.hasOwnProperty(\n                          driver.Constructor.constructorId\n                        )\n                          ? TeamColors[driver.Constructor.constructorId]\n                          : \"#000000\",\n                      }}\n                    />\n                  </td>\n                  <td>\n                    <CircleFlag\n                      countryCode={CountriesCodeNationality[\n                        driver.Driver.nationality\n                      ].toLowerCase()}\n                      height={20}\n                    />\n                  </td>\n                  <td className=\"hideXS\">\n                    {driver.Driver.givenName + \" \" + driver.Driver.familyName}\n                  </td>\n                  <td className=\"showXS\">{driver.Driver.code}</td>\n                  <td>{driver.Time.time}</td>\n                </tr>\n              ))}\n            </tbody>\n          </Table>\n          <h4>\n            <b>Fastest lap / Pole position</b>\n          </h4>\n          <Table responsive>\n            <tbody>\n              {fastestLap !== null ? (\n                <tr>\n                  <td>FL</td>\n                  <td>\n                    <div\n                      style={{\n                        width: \"7px\",\n                        height: \"25px\",\n                        backgroundColor: TeamColors.hasOwnProperty(\n                          fastestLap.Constructor.constructorId\n                        )\n                          ? TeamColors[fastestLap.Constructor.constructorId]\n                          : \"#000000\",\n                      }}\n                    />\n                  </td>\n                  <td className=\"hideXS\">\n                    {fastestLap.Driver.givenName +\n                      \" \" +\n                      fastestLap.Driver.familyName}\n                  </td>\n                  <td className=\"showXS\">{fastestLap.Driver.code}</td>\n                  <td>{fastestLap.FastestLap.Time.time}</td>\n                  <td>{fastestLap.FastestLap.AverageSpeed.speed + \" kph\"}</td>\n                </tr>\n              ) : (\n                <tr>\n                  <td>FL</td>\n                  <td>N/A</td>\n                  <td>N/A</td>\n                  <td>N/A</td>\n                  <td>N/A</td>\n                </tr>\n              )}\n              {loadingPolePosition ? null : (\n                <tr>\n                  <td>PP</td>\n                  <td>\n                    <div\n                      style={{\n                        width: \"7px\",\n                        height: \"25px\",\n                        backgroundColor: TeamColors.hasOwnProperty(\n                          polePosition.Constructor.constructorId\n                        )\n                          ? TeamColors[polePosition.Constructor.constructorId]\n                          : \"#000000\",\n                      }}\n                    />\n                  </td>\n                  <td>\n                    <CircleFlag\n                      countryCode={CountriesCodeNationality[\n                        polePosition.Driver.nationality\n                      ].toLowerCase()}\n                      height={20}\n                    />\n                  </td>\n                  <td className=\"hideXS\">\n                    {polePosition.Driver.givenName +\n                      \" \" +\n                      polePosition.Driver.familyName}\n                  </td>\n                  <td className=\"showXS\">{polePosition.Driver.code}</td>\n                  <td>{polePosition.Q3}</td>\n                </tr>\n              )}\n            </tbody>\n          </Table>\n        </div>\n      }\n      cardFooter={\n        <h4>\n          Round:{\" \"}\n          {previousRaceData.MRData.RaceTable.round + \" / \" + totalNumberOfRaces}\n        </h4>\n      }\n      cardHeight=\"30rem\"\n      variant={\"light\"}\n    ></GenericCard>\n  );\n};\n\nexport default PreviousRaceStats;\n","import React, { useState, useEffect } from \"react\";\nimport \"react-circular-progressbar/dist/styles.css\";\nimport GenericCard from \"../../Cards/GenericCard\";\nimport Row from \"react-bootstrap/Row\";\nimport Col from \"react-bootstrap/Col\";\nimport Container from \"react-bootstrap/Container\";\nimport DriversStandings from \"../Standings/DriversStandings\";\nimport ConstructorsStandings from \"../Standings/ConstructorsStandings\";\nimport PreviousRaceCard from \"../MainFeed/PreviousRaceCard\";\nimport NextRaceCard from \"./NextRaceCard\";\nimport StandingsCard from \"./StandingsCard\";\nimport Spinner from \"react-bootstrap/Spinner\";\nimport PreviousRaceStats from \"./PreviousRaceStats\";\n\nconst MainFeed = () => {\n  const [nextRaceData, setNextRaceData] = useState(null);\n  const [driversStandings, setDriversStandings] = useState(null);\n  const [previousRaceResult, setPreviousRaceResult] = useState(null);\n  const [totalNumberOfRaces, setTotalNumberOfRaces] = useState(null);\n  const [constructorsStandings, setConstructorsStandings] = useState(null);\n  const [loadingNextRaceData, setLoadingNextRaceData] = useState(true);\n  const [loadingPreviousRaceResult, setLoadingPreviousRaceResult] =\n    useState(true);\n  const [loadingConstructorsStandings, setLoadingConstructorsStandings] =\n    useState(true);\n  const [loadingDriversStandings, setLoadingDriversStandings] = useState(true);\n\n  useEffect(() => {\n    const fetchPreviousRaceResult = async () => {\n      const response = await fetch(\n        `https://ergast.com/api/f1/current/last/results.json`\n      );\n      const data = await response.json();\n\n      setPreviousRaceResult(data);\n      setLoadingPreviousRaceResult(false);\n      fetchNextRaceData(data.MRData.RaceTable.round);\n    };\n\n    const fetchNextRaceData = async (round) => {\n      const response = await fetch(`https://ergast.com/api/f1/current.json`);\n      const data = await response.json();\n\n      if (round >= data.MRData.RaceTable.Races.length) {\n        setNextRaceData(null);\n      } else {\n        setNextRaceData(data.MRData.RaceTable.Races[parseInt(round)]);\n      }\n\n      setTotalNumberOfRaces(data.MRData.RaceTable.Races.length);\n      setLoadingNextRaceData(false);\n    };\n\n    const fetchConstructorsStandings = async () => {\n      const response = await fetch(\n        `https://ergast.com/api/f1/current/constructorStandings.json`\n      );\n      const data = await response.json();\n\n      setConstructorsStandings(\n        data.MRData.StandingsTable.StandingsLists[0].ConstructorStandings\n      );\n      setLoadingConstructorsStandings(false);\n    };\n\n    const fetchDriversStandings = async () => {\n      const response = await fetch(\n        `https://ergast.com/api/f1/current/driverStandings.json`\n      );\n      const data = await response.json();\n\n      setDriversStandings(\n        data.MRData.StandingsTable.StandingsLists[0].DriverStandings\n      );\n      setLoadingDriversStandings(false);\n    };\n\n    fetchPreviousRaceResult();\n    fetchDriversStandings();\n    fetchConstructorsStandings();\n  }, []);\n\n  return (\n    <Container style={{ minHeight: \"700px\" }}>\n      <Row className=\"justify-content-center text-center\">\n        <Col md=\"auto\">\n          <h1 style={{ marginBottom: \"3%\" }}>\n            {loadingNextRaceData\n              ? \"\"\n              : previousRaceResult.MRData.RaceTable.season}{\" \"}\n            Formula One\n          </h1>\n        </Col>\n      </Row>\n      {loadingPreviousRaceResult || loadingNextRaceData ? (\n        <Row\n          className=\"justify-content-center text-center\"\n          style={{ minHeight: \"200px\" }}\n        >\n          <Spinner animation=\"border\" />\n        </Row>\n      ) : (\n        <Row className=\"justify-content-center text-center\">\n          <Row>\n            <Col lg={12}>\n              {nextRaceData == null ? (\n                <div>\n                  <p></p>\n                  <GenericCard\n                    cardTitle=\"Next Race\"\n                    cardBody={<h1>There's no upcoming events.</h1>}\n                    cardFooter={<h4>Please check back later</h4>}\n                    cardHeight=\"24rem\"\n                    variant={\"light\"}\n                  />\n                  <p></p>\n                </div>\n              ) : (\n                <div>\n                  <p></p>\n                  <NextRaceCard nextRaceData={nextRaceData} />\n                  <p></p>\n                </div>\n              )}\n            </Col>\n          </Row>\n          <Row>\n            <Col xs={12} lg={6}>\n              <p></p>\n              <PreviousRaceCard previousRaceData={previousRaceResult} />\n              <p></p>\n            </Col>\n            <Col xs={12} lg={6}>\n              <div>\n                <p></p>\n                <PreviousRaceStats\n                  previousRaceData={previousRaceResult}\n                  totalNumberOfRaces={totalNumberOfRaces}\n                />\n                <p></p>\n              </div>\n            </Col>\n          </Row>\n        </Row>\n      )}\n      <br />\n      {loadingDriversStandings || loadingConstructorsStandings ? (\n        \"\"\n      ) : (\n        <Row>\n          <Col>\n            <StandingsCard\n              type={\"Drivers'\"}\n              standings={\n                <DriversStandings\n                  style={{\n                    overflow: \"hidden\",\n                    overflowY: \"scroll\",\n                    height: \"330px\",\n                  }}\n                  driversStandings={driversStandings}\n                />\n              }\n            />\n          </Col>\n          <Col>\n            <StandingsCard\n              type={\"Constructors'\"}\n              standings={\n                <ConstructorsStandings\n                  style={{\n                    overflow: \"hidden\",\n                    overflowY: \"scroll\",\n                    height: \"330px\",\n                  }}\n                  constructorsStandings={constructorsStandings}\n                />\n              }\n            />\n          </Col>\n        </Row>\n      )}\n    </Container>\n  );\n};\n\nexport default MainFeed;\n","import React from \"react\";\nimport \"react-circular-progressbar/dist/styles.css\";\nimport NavBar from \"../components/Navbar/Navbar\";\nimport Footer from \"../components/Footer/Footer\";\nimport MainFeed from \"../components/Stats/MainFeed/MainFeed\";\n\nconst HomePage = () => {\n  return (\n    <div>\n      <NavBar />\n      <MainFeed />\n      <Footer />\n    </div>\n  );\n};\n\nexport default HomePage;\n","import React from \"react\";\nimport Table from \"react-bootstrap/Table\";\nimport { FaStopwatch } from \"react-icons/fa\";\nimport Row from \"react-bootstrap/Row\";\nimport Col from \"react-bootstrap/Col\";\nimport \"../Styles/Table.css\";\nimport { TeamColors } from \"../../../data/TeamColors\";\n\nconst RaceClassification = ({ raceClassification }) => {\n  return (\n    <div>\n      <Table responsive=\"sm\">\n        <thead>\n          <tr>\n            <th>Pos</th>\n            <th className=\"hideXS\">Number</th>\n            <th>Driver</th>\n            <th className=\"hideXS\">Team</th>\n            <th className=\"hideXS\">Laps</th>\n            <th>Time/Retired</th>\n            <th>Pts</th>\n          </tr>\n        </thead>\n        <tbody>\n          {raceClassification.map((driver, index) => (\n            <tr key={index}>\n              <td>{driver.position}</td>\n              <td className=\"hideXS\">{driver.number}</td>\n              <td>\n                <Row className=\"row nopadding\">\n                  <Col xs={2}>\n                    <div\n                      style={{\n                        width: \"7px\",\n                        height: \"25px\",\n                        backgroundColor: TeamColors.hasOwnProperty(\n                          driver.Constructor.constructorId\n                        )\n                          ? TeamColors[driver.Constructor.constructorId]\n                          : \"#000000\",\n                      }}\n                    />\n                  </Col>\n                  <Col xs={6}>\n                    {driver.Driver.givenName + \" \" + driver.Driver.familyName}\n                  </Col>\n                </Row>\n              </td>\n\n              <td className=\"hideXS\">{driver.Constructor.name}</td>\n              <td className=\"hideXS\">{driver.laps}</td>\n              <td>\n                {driver.Time !== undefined\n                  ? driver.status === \"Finished\"\n                    ? driver.Time.time\n                    : driver.status\n                  : driver.status}\n              </td>\n              {driver.FastestLap && driver.FastestLap.rank === \"1\" ? (\n                <td>\n                  <Row>\n                    <Col>{driver.points}</Col>\n                    <Col>\n                      <FaStopwatch />\n                    </Col>\n                  </Row>\n                </td>\n              ) : (\n                <td>{driver.points}</td>\n              )}\n            </tr>\n          ))}\n        </tbody>\n      </Table>\n      <p>\n        <FaStopwatch /> - Fastest lap of the race\n      </p>\n    </div>\n  );\n};\n\nexport default RaceClassification;\n","import React from \"react\";\nimport Table from \"react-bootstrap/Table\";\nimport \"../Styles/Table.css\";\nimport { TeamColors } from \"../../../data/TeamColors\";\nimport Row from \"react-bootstrap/Row\";\nimport Col from \"react-bootstrap/Col\";\n\nconst RaceQualifying = ({ raceQualifying }) => {\n  return (\n    <div>\n      <Table responsive=\"sm\">\n        <thead>\n          <tr>\n            <th>Pos</th>\n            <th className=\"hideXS\">Number</th>\n            <th>Driver</th>\n            <th className=\"hideXS\">Team</th>\n            <th>Q1</th>\n            <th>Q2</th>\n            <th>Q3</th>\n          </tr>\n        </thead>\n        <tbody>\n          {raceQualifying.map((driver, index) => (\n            <tr key={index}>\n              <td>{driver.position}</td>\n              <td className=\"hideXS\">{driver.number}</td>\n              <td className=\"hideXS\">\n                <Row className=\"row nopadding\">\n                  <Col xs={1}>\n                    <div\n                      style={{\n                        width: \"7px\",\n                        height: \"25px\",\n                        backgroundColor: TeamColors.hasOwnProperty(\n                          driver.Constructor.constructorId\n                        )\n                          ? TeamColors[driver.Constructor.constructorId]\n                          : \"#000000\",\n                      }}\n                    />\n                  </Col>\n                  <Col xs={11}>\n                    {driver.Driver.givenName + \" \" + driver.Driver.familyName}\n                  </Col>\n                </Row>\n              </td>\n              <td className=\"showXS\">\n                <Row className=\"row nopadding\">\n                  <Col xs={2}>\n                    <div\n                      style={{\n                        width: \"7px\",\n                        height: \"25px\",\n                        backgroundColor: TeamColors.hasOwnProperty(\n                          driver.Constructor.constructorId\n                        )\n                          ? TeamColors[driver.Constructor.constructorId]\n                          : \"#000000\",\n                      }}\n                    />\n                  </Col>\n                  <Col xs={6}>\n                    {!driver.Driver.hasOwnProperty(\"code\")\n                      ? driver.Driver.familyName.substring(0, 3).toUpperCase()\n                      : driver.Driver.code}\n                  </Col>\n                </Row>\n              </td>\n\n              <td className=\"hideXS\">{driver.Constructor.name}</td>\n              <td>\n                {driver.hasOwnProperty(\"Q1\")\n                  ? driver.Q1 === \"\"\n                    ? \"-\"\n                    : driver.Q1\n                  : \"-\"}\n              </td>\n              <td>{driver.hasOwnProperty(\"Q2\") ? driver.Q2 : \"-\"}</td>\n              <td>{driver.hasOwnProperty(\"Q3\") ? driver.Q3 : \"-\"}</td>\n            </tr>\n          ))}\n        </tbody>\n      </Table>\n    </div>\n  );\n};\n\nexport default RaceQualifying;\n","import React from \"react\";\nimport Container from \"react-bootstrap/Container\";\nimport Row from \"react-bootstrap/Row\";\nimport Col from \"react-bootstrap/Col\";\nimport { CircleFlag } from \"react-circle-flags\";\nimport { CountriesCodeNationality } from \"../../../data/CountryCodeNationality\";\n\nconst Podium = ({ eventClassification }) => {\n  return (\n    <div>\n      <Container>\n        <Row className=\"text-center\">\n          <Col\n            xs={{ span: 12, order: \"second\" }}\n            md={{ span: 4, order: \"first\" }}\n          >\n            <div id=\"secondPlace\">\n              <Row className=\"justify-content-md-center\">\n                <Col md=\"auto\">\n                  <h2>2nd</h2>\n                </Col>\n              </Row>\n              <Row className=\"justify-content-md-center\">\n                <Col md=\"auto\">\n                  <h3>\n                    {eventClassification[1].number}{\" \"}\n                    {eventClassification[1].Driver.givenName}{\" \"}\n                    {eventClassification[1].Driver.familyName}\n                  </h3>\n                </Col>\n              </Row>\n              <Row className=\"justify-content-md-center\">\n                <Col md=\"auto\">\n                  <CircleFlag\n                    countryCode={CountriesCodeNationality[\n                      eventClassification[1].Driver.nationality\n                    ].toLowerCase()}\n                    height=\"60\"\n                  />\n                </Col>\n              </Row>\n              <Row className=\"justify-content-md-center\">\n                <Col md=\"auto\">\n                  <h3>{eventClassification[1].Constructor.name}</h3>\n                </Col>\n              </Row>\n              <Row className=\"justify-content-md-center\">\n                <Col md=\"auto\">\n                  <h3>\n                    {eventClassification[1].hasOwnProperty(\"Time\")\n                      ? eventClassification[1].Time.time\n                      : eventClassification[1].hasOwnProperty(\"status\") &&\n                        eventClassification[1].status !== \"Finished\"\n                      ? eventClassification[1].status\n                      : eventClassification[1].hasOwnProperty(\"Q3\")\n                      ? eventClassification[1].Q3\n                      : eventClassification[1].Q1}\n                  </h3>\n                </Col>\n              </Row>\n            </div>\n          </Col>\n          <Col\n            xs={{ span: 12, order: \"first\" }}\n            md={{ span: 4, order: \"second\" }}\n          >\n            <div id=\"firstPlace\">\n              <Row className=\"justify-content-md-center\">\n                <Col md=\"auto\">\n                  <h1>1st</h1>\n                </Col>\n              </Row>\n              <Row className=\"justify-content-md-center\">\n                <Col md=\"auto\">\n                  <h3>\n                    {eventClassification[0].number}{\" \"}\n                    {eventClassification[0].Driver.givenName}{\" \"}\n                    {eventClassification[0].Driver.familyName}\n                  </h3>\n                </Col>\n              </Row>\n              <Row className=\"justify-content-md-center\">\n                <Col md=\"auto\">\n                  <CircleFlag\n                    countryCode={CountriesCodeNationality[\n                      eventClassification[0].Driver.nationality\n                    ].toLowerCase()}\n                    height=\"60\"\n                  />\n                </Col>\n              </Row>\n              <Row className=\"justify-content-md-center\">\n                <Col md=\"auto\">\n                  <h3>{eventClassification[0].Constructor.name}</h3>\n                </Col>\n              </Row>\n              <Row className=\"justify-content-md-center\">\n                <Col md=\"auto\">\n                  <h3>\n                    {eventClassification[0].hasOwnProperty(\"Time\")\n                      ? eventClassification[0].Time.time\n                      : eventClassification[0].hasOwnProperty(\"status\") &&\n                        eventClassification[0].status !== \"Finished\"\n                      ? eventClassification[0].status\n                      : eventClassification[0].hasOwnProperty(\"Q3\")\n                      ? eventClassification[0].Q3\n                      : eventClassification[1].Q1}\n                  </h3>\n                </Col>\n              </Row>\n            </div>\n          </Col>\n          <Col xs={{ span: 12, order: \"last\" }} md={{ span: 4, order: \"last\" }}>\n            <div id=\"thirdPlace\">\n              <Row className=\"justify-content-md-center\">\n                <Col md=\"auto\">\n                  <h3>3rd</h3>\n                </Col>\n              </Row>\n              <Row className=\"justify-content-md-center\">\n                <Col md=\"auto\">\n                  <h3>\n                    {eventClassification[2].number}{\" \"}\n                    {eventClassification[2].Driver.givenName}{\" \"}\n                    {eventClassification[2].Driver.familyName}\n                  </h3>\n                </Col>\n              </Row>\n              <Row className=\"justify-content-md-center\">\n                <Col md=\"auto\">\n                  <CircleFlag\n                    countryCode={CountriesCodeNationality[\n                      eventClassification[2].Driver.nationality\n                    ].toLowerCase()}\n                    height=\"60\"\n                  />\n                </Col>\n              </Row>\n              <Row className=\"justify-content-md-center\">\n                <Col md=\"auto\">\n                  <h3>{eventClassification[2].Constructor.name}</h3>\n                </Col>\n              </Row>\n              <Row className=\"justify-content-md-center\">\n                <Col md=\"auto\">\n                  <h3>\n                    {eventClassification[2].hasOwnProperty(\"Time\")\n                      ? eventClassification[2].Time.time\n                      : eventClassification[2].hasOwnProperty(\"status\") &&\n                        eventClassification[2].status !== \"Finished\"\n                      ? eventClassification[2].status\n                      : eventClassification[2].hasOwnProperty(\"Q3\")\n                      ? eventClassification[2].Q3\n                      : eventClassification[1].Q1}\n                  </h3>\n                </Col>\n              </Row>\n            </div>\n          </Col>\n        </Row>\n      </Container>\n    </div>\n  );\n};\n\nexport default Podium;\n","import Row from \"react-bootstrap/Row\";\nimport Col from \"react-bootstrap/Col\";\nimport { CircleFlag } from \"react-circle-flags\";\n\nconst RaceTab = ({ raceInfo, eventCountryCode }) => {\n  const getLocalRaceDate = (date, time) => {\n    const raceDate = new Date(date + \"T\" + time);\n    const hours = (raceDate.getHours() < 10 ? \"0\" : \"\") + raceDate.getHours();\n    const minutes =\n      (raceDate.getMinutes() < 10 ? \"0\" : \"\") + raceDate.getMinutes();\n\n    return hours + \":\" + minutes + \":00\";\n  };\n\n  return (\n    <div>\n      <Row className=\"justify-content-center text-center\">\n        <Col md=\"auto\">\n          <h1>{raceInfo.raceName}</h1>\n        </Col>\n      </Row>\n      <Row className=\"justify-content-center text-center\">\n        <Col md=\"auto\">\n          <h3>{raceInfo.date}</h3>\n        </Col>\n      </Row>\n      <Row className=\"justify-content-center text-center\">\n        <Col md=\"auto\">\n          <h3>\n            {raceInfo.hasOwnProperty(\"time\")\n              ? getLocalRaceDate(raceInfo.date, raceInfo.time)\n              : \"N/A\"}\n          </h3>\n        </Col>\n      </Row>\n      <Row className=\"justify-content-center text-center\">\n        <Col md=\"auto\">\n          <CircleFlag countryCode={eventCountryCode} height=\"100\" />\n        </Col>\n      </Row>\n    </div>\n  );\n};\n\nexport default RaceTab;\n","import React, { useEffect, useState } from \"react\";\nimport \"./Map.css\";\nimport { MapContainer, TileLayer, Marker, Popup } from \"react-leaflet\";\n\nconst Map = ({ coordinates, circuitName }) => {\n  const [map, setMap] = useState(null);\n\n  useEffect(() => {\n    if (map) {\n      setInterval(function () {\n        map.invalidateSize();\n      }, 100);\n    }\n  }, [map]);\n\n  return (\n    <MapContainer\n      center={coordinates}\n      zoom={12}\n      scrollWheelZoom={true}\n      whenCreated={setMap}\n    >\n      <TileLayer\n        attribution='&copy; <a href=\"http://osm.org/copyright\">OpenStreetMap</a> contributors'\n        url=\"https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png\"\n      />\n      <Marker position={coordinates}>\n        <Popup>\n          {circuitName} <br /> {coordinates[0] + \" | \" + coordinates[1]}\n        </Popup>\n      </Marker>\n    </MapContainer>\n  );\n};\n\nexport default Map;\n","import React, { useState, useEffect } from \"react\";\nimport Row from \"react-bootstrap/Row\";\nimport Col from \"react-bootstrap/Col\";\n\nconst Circuit = ({ circuitId }) => {\n  const [fastestLap, setFastestLap] = useState(null);\n  const [firstGrandPrix, setFirstGrandPrix] = useState(null);\n  const [loadingFastestLap, setLoadingFastestLap] = useState(true);\n  const [loadingFirstGrandPrix, setLoadingFirstGrandPrix] = useState(true);\n\n  useEffect(() => {\n    const fetchCircuitFastestLap = () => {\n      fetch(\n        `https://ergast.com/api/f1/circuits/${circuitId}/fastest/1/results.json`\n      )\n        .then((res) => res.json())\n        .then((data) => {\n          let bestLap = data.MRData.RaceTable.Races[0];\n\n          data.MRData.RaceTable.Races.forEach((lap) => {\n            if (\n              lap.Results[0].FastestLap.Time.time <\n              bestLap.Results[0].FastestLap.Time.time\n            ) {\n              bestLap = lap;\n            }\n          });\n\n          setFastestLap(bestLap);\n          setLoadingFastestLap(false);\n        });\n    };\n\n    const fetchCircuitFirstGP = () => {\n      fetch(`https://ergast.com/api/f1/circuits/${circuitId}/races.json`)\n        .then((res) => res.json())\n        .then((data) => {\n          setFirstGrandPrix(data.MRData.RaceTable.Races[0].season);\n          setLoadingFirstGrandPrix(false);\n        });\n    };\n\n    fetchCircuitFastestLap();\n    fetchCircuitFirstGP();\n  }, [circuitId]);\n\n  return (\n    <div>\n      {loadingFastestLap ||\n      loadingFirstGrandPrix ||\n      fastestLap === undefined ? (\n        \"\"\n      ) : (\n        <div>\n          <Row>\n            <Col>\n              <Col>\n                <h5>\n                  Lap record: {fastestLap.Results[0].FastestLap.Time.time}\n                  {\" - \"}\n                  {fastestLap.season}\n                  {\" - \"}\n                  {fastestLap.Results[0].Driver.givenName}{\" \"}\n                  {fastestLap.Results[0].Driver.familyName}{\" \"}\n                </h5>\n              </Col>\n            </Col>\n          </Row>\n          <Row>\n            <Col>\n              <h5>First grand prix: {firstGrandPrix}</h5>\n            </Col>\n          </Row>\n        </div>\n      )}\n    </div>\n  );\n};\n\nexport default Circuit;\n","import React from \"react\";\nimport Map from \"../../Map/Map\";\nimport Row from \"react-bootstrap/Row\";\nimport Col from \"react-bootstrap/Col\";\nimport { CircleFlag } from \"react-circle-flags\";\nimport Circuit from \"./CircuitData\";\n\nconst CircuitTab = ({ raceInfo, eventCountryCode }) => {\n  return (\n    <div>\n      <Row className=\"justify-content-center text-center\">\n        <Col>\n          <h1>{raceInfo.Circuit.circuitName}</h1>\n          <h3>\n            <CircleFlag countryCode={eventCountryCode} height=\"30\" />{\" \"}\n            {raceInfo.Circuit.Location.country}\n          </h3>\n          <h3>{raceInfo.Circuit.Location.locality}</h3>\n          <Circuit circuitId={raceInfo.Circuit.circuitId} />\n        </Col>\n        <Col md=\"auto\">\n          <Map\n            coordinates={[\n              raceInfo.Circuit.Location.lat,\n              raceInfo.Circuit.Location.long,\n            ]}\n            circuitName={raceInfo.Circuit.circuitName}\n            mapHeight={{ height: \"600px\" }}\n          ></Map>\n        </Col>\n      </Row>\n    </div>\n  );\n};\n\nexport default CircuitTab;\n","import React, { useState, useEffect } from \"react\";\nimport Container from \"react-bootstrap/Container\";\nimport Tabs from \"react-bootstrap/Tabs\";\nimport Tab from \"react-bootstrap/Tab\";\nimport RaceClassification from \"../Classifications/RaceClassification\";\nimport RaceQualifying from \"../Classifications/RaceQualifying\";\nimport EventPodium from \"./Podium\";\nimport RaceTab from \"./RaceTab\";\nimport CircuitTab from \"./CircuitTab\";\n\nconst EventTabs = ({ raceInfo, raceClassification, raceQualifying }) => {\n  const [eventCountryCode, setEventCountryCode] = useState(null);\n\n  useEffect(() => {\n    const fetchCountryCode = async () => {\n      await fetch(\n        `https://restcountries.eu/rest/v2/name/${raceInfo.Circuit.Location.country}?fullText=true`\n      )\n        .then((res) => {\n          if (res.ok) {\n            return res.json();\n          }\n        })\n        .then((data) => {\n          setEventCountryCode(data[0].alpha2Code.toLowerCase());\n        })\n        .catch((error) => setEventCountryCode(null));\n    };\n\n    fetchCountryCode();\n  }, [raceInfo.Circuit.Location.country]);\n\n  return (\n    <div>\n      <Tabs\n        defaultActiveKey=\"race\"\n        id=\"uncontrolled-tab-example\"\n        className=\"mb-3\"\n      >\n        <Tab eventKey=\"race\" title=\"Race\">\n          <Container style={{ minHeight: \"250px\" }}>\n            <RaceTab raceInfo={raceInfo} eventCountryCode={eventCountryCode} />\n          </Container>\n          {raceClassification != null ? (\n            <RaceClassification raceClassification={raceClassification} />\n          ) : (\n            \"\"\n          )}\n        </Tab>\n        <Tab eventKey=\"circuit\" title=\"Circuit\">\n          <Container style={{ minHeight: \"250px\" }}>\n            <CircuitTab\n              raceInfo={raceInfo}\n              eventCountryCode={eventCountryCode}\n            />\n          </Container>\n          {raceClassification != null ? (\n            <RaceClassification raceClassification={raceClassification} />\n          ) : (\n            \"\"\n          )}\n        </Tab>\n\n        {raceClassification != null ? (\n          <Tab eventKey=\"podium\" title=\"Podium\">\n            <Container style={{ minHeight: \"250px\" }}>\n              <EventPodium eventClassification={raceClassification} />\n            </Container>\n            <RaceClassification raceClassification={raceClassification} />\n          </Tab>\n        ) : (\n          \"\"\n        )}\n\n        {raceQualifying != null ? (\n          <Tab eventKey=\"qualifying\" title=\"Qualifying\">\n            <Container style={{ minHeight: \"250px\" }}>\n              <EventPodium eventClassification={raceQualifying} />\n            </Container>\n            <RaceQualifying raceQualifying={raceQualifying} />\n          </Tab>\n        ) : (\n          \"\"\n        )}\n      </Tabs>\n    </div>\n  );\n};\n\nexport default EventTabs;\n","import React, { useState, useEffect } from \"react\";\nimport Container from \"react-bootstrap/Container\";\nimport Row from \"react-bootstrap/Row\";\nimport Col from \"react-bootstrap/Col\";\nimport Countdown from \"react-countdown\";\nimport EventTabs from \"./EventTabs\";\nimport { Redirect } from \"react-router-dom\";\nimport \"../Styles/RaceCountdown.css\";\n\nconst RaceCountdown = ({ season, round }) => {\n  const [raceInfo, setRaceInfo] = useState(null);\n  const [loadingRaceInfo, setLoadingRaceInfo] = useState(true);\n\n  useEffect(() => {\n    const fetchRaceInfo = async () => {\n      const response = await fetch(`https://ergast.com/api/f1/${season}.json`);\n      const data = await response.json();\n\n      if (data.MRData.RaceTable.Races[parseInt(round) - 1] !== undefined) {\n        setRaceInfo(data.MRData.RaceTable.Races[parseInt(round) - 1]);\n      }\n\n      setLoadingRaceInfo(false);\n    };\n\n    fetchRaceInfo();\n  }, [season, round]);\n\n  const renderer = ({ days, hours, minutes, seconds }) => {\n    return (\n      <Row\n        style={{ marginTop: \"2%\" }}\n        className=\"justify-content-center text-center\"\n      >\n        <Col xs={2} sm={2}>\n          <h1 className=\"countdown\">{days}</h1>\n          <h5 className=\"countdown\">days</h5>\n        </Col>\n        <Col xs={2} sm={3}>\n          <h1 className=\"countdown\">{hours}</h1>\n          <h5 className=\"countdown\">hours</h5>\n        </Col>\n        <Col xs={2} sm={2}>\n          <h1 className=\"countdown\">{minutes}</h1>\n          <h5 className=\"countdown\">min.</h5>\n        </Col>\n        <Col xs={2} sm={2}>\n          <h1 className=\"countdown\">{seconds}</h1>\n          <h5 className=\"countdown\">sec.</h5>\n        </Col>\n      </Row>\n    );\n  };\n\n  return (\n    <div>\n      <Container fluid=\"md\" style={{ minHeight: \"700px\" }}>\n        {loadingRaceInfo ? (\n          \"\"\n        ) : raceInfo === null ? (\n          <Redirect to=\"/error\" />\n        ) : (\n          <div>\n            <EventTabs season={season} round={round} raceInfo={raceInfo} />\n            <Row className=\"justify-content-center text-center\">\n              <Col>\n                <div>\n                  <Countdown\n                    date={\n                      Date.now() +\n                      (new Date(raceInfo.date).getTime() +\n                        raceInfo.time.split(\":\")[0] * 3600000 -\n                        new Date().getTime())\n                    }\n                    renderer={renderer}\n                  />\n                </div>\n              </Col>\n            </Row>\n          </div>\n        )}\n      </Container>\n    </div>\n  );\n};\n\nexport default RaceCountdown;\n","import React, { useState, useEffect } from \"react\";\nimport Container from \"react-bootstrap/Container\";\nimport EventTabs from \"./EventTabs\";\nimport Spinner from \"react-bootstrap/Spinner\";\nimport Row from \"react-bootstrap/Row\";\nimport RaceCountdown from \"./RaceCountdown\";\n\nconst Race = ({ season, round }) => {\n  const [raceInfo, setRaceInfo] = useState(null);\n  const [raceClassification, setRaceClassification] = useState(null);\n  const [raceQualifying, setRaceQualifying] = useState(null);\n  const [loadingRaceResult, setLoadingRaceResult] = useState(true);\n  const [loadingRaceQualifying, setLoadingRaceQualifying] = useState(true);\n\n  useEffect(() => {\n    const fetchRaceResult = async () => {\n      const response = await fetch(\n        `https://ergast.com/api/f1/${season}/${round}/results.json`\n      );\n      const data = await response.json();\n\n      if (data.MRData.RaceTable.Races[0] !== undefined) {\n        setRaceInfo(data.MRData.RaceTable.Races[0]);\n        setRaceClassification(data.MRData.RaceTable.Races[0].Results);\n      }\n\n      setLoadingRaceResult(false);\n    };\n\n    const fetchRaceQualifying = async () => {\n      const response = await fetch(\n        `https://ergast.com/api/f1/${season}/${round}/qualifying.json`\n      );\n      const data = await response.json();\n\n      if (data.MRData.RaceTable.Races[0] !== undefined) {\n        setRaceQualifying(data.MRData.RaceTable.Races[0].QualifyingResults);\n      }\n\n      setLoadingRaceQualifying(false);\n    };\n\n    fetchRaceResult();\n    fetchRaceQualifying();\n  }, [season, round]);\n\n  return (\n    <div>\n      <Container fluid=\"md\">\n        {loadingRaceResult || loadingRaceQualifying ? (\n          <Container style={{ marginTop: \"5%\", minHeight: \"700px\" }}>\n            <Row className=\"justify-content-center text-center\">\n              <Spinner animation=\"border\" />\n            </Row>\n          </Container>\n        ) : raceClassification == null ? (\n          <RaceCountdown season={season} round={round} />\n        ) : (\n          <Container>\n            <EventTabs\n              raceInfo={raceInfo}\n              raceClassification={raceClassification}\n              raceQualifying={raceQualifying}\n            />\n          </Container>\n        )}\n      </Container>\n    </div>\n  );\n};\n\nexport default Race;\n","import React from \"react\";\nimport NavBar from \"../components/Navbar/Navbar\";\nimport Footer from \"../components/Footer/Footer\";\nimport Race from \"../components/Stats/RaceData/Race\";\nimport { useParams } from \"react-router-dom\";\n\nconst RaceResult = () => {\n  const { season } = useParams();\n  const { round } = useParams();\n\n  return (\n    <div>\n      <NavBar />\n      <Race season={season} round={round} />\n      <Footer />\n    </div>\n  );\n};\n\nexport default RaceResult;\n","import React, { useState, useEffect } from \"react\";\nimport Row from \"react-bootstrap/Row\";\nimport Col from \"react-bootstrap/Col\";\nimport { Link } from \"react-router-dom\";\nimport { CircleFlag } from \"react-circle-flags\";\nimport Alert from \"react-bootstrap/Alert\";\n\nconst RaceInfo = ({ race }) => {\n  const [countryCode, setCountryCode] = useState(null);\n  const [loadigCountryCode, setLoadingCountryCode] = useState(true);\n\n  useEffect(() => {\n    const fetchCountryCode = async () => {\n      await fetch(\n        `https://restcountries.eu/rest/v2/name/${race.Circuit.Location.country}?fullText=true`\n      )\n        .then((res) => {\n          if (res.ok) {\n            return res.json();\n          }\n        })\n        .then((data) => {\n          setCountryCode(data[0].alpha2Code.toLowerCase());\n          setLoadingCountryCode(false);\n        })\n        .catch((error) => setCountryCode(null));\n    };\n\n    fetchCountryCode();\n  }, [race.Circuit.Location.country]);\n\n  const getLocalRaceDate = (date, time) => {\n    const raceDate = new Date(date + \"T\" + time);\n    const hours = (raceDate.getHours() < 10 ? \"0\" : \"\") + raceDate.getHours();\n    const minutes =\n      (raceDate.getMinutes() < 10 ? \"0\" : \"\") + raceDate.getMinutes();\n\n    return hours + \":\" + minutes + \":00\";\n  };\n\n  return (\n    <Row className=\"center-xs justify-content-between\">\n      <Col xs={12} md={12} lg=\"auto\" className=\"text-center\">\n        {loadigCountryCode && countryCode != null ? (\n          \"\"\n        ) : (\n          <CircleFlag countryCode={countryCode} height={80} style={{marginBottom: \"2%\"}}/>\n        )}\n      </Col>\n      <Col xs={12} md={12} lg=\"auto\">\n        <Link to={\"/race/\" + race.season + \"/\" + race.round}>\n          <Alert variant=\"primary\">Round #{race.round}</Alert>\n        </Link>\n      </Col>\n      <Col xs={12} md={12} lg={6} className=\"center-xs\">\n        <h3>{race.raceName}</h3>\n        <h5>{race.Circuit.circuitName}</h5>\n      </Col>\n      <Col xs={12} md={12} lg={3} className=\"center-xs center\">\n        <h5>{race.date}</h5>\n        <h5>\n          {race.hasOwnProperty(\"time\")\n            ? getLocalRaceDate(race.date, race.time)\n            : \"\"}\n        </h5>\n      </Col>\n    </Row>\n  );\n};\n\nexport default RaceInfo;\n","import React, { useState, useEffect } from \"react\";\nimport Container from \"react-bootstrap/Container\";\nimport Row from \"react-bootstrap/Row\";\nimport Col from \"react-bootstrap/Col\";\nimport RaceInfo from \"./RaceInfo\";\nimport Spinner from \"react-bootstrap/Spinner\";\nimport Dropdown from \"react-bootstrap/Dropdown\";\nimport \"./Races.css\";\nimport ListGroup from \"react-bootstrap/ListGroup\";\n\nconst Races = () => {\n  const FIRST_SEASON = 1950;\n  const [season, setSeason] = useState(\"2021\");\n  const [seasonSchedule, setSeasonSchedule] = useState(null);\n  const [seasonsYearsList, setSeasonsYearsList] = useState(null);\n  const [loadingSeasonSchedule, setLoadingSchedule] = useState(true);\n\n  useEffect(() => {\n    const fetchSeasonSchedule = async () => {\n      const response = await fetch(`https://ergast.com/api/f1/${season}.json`);\n      const data = await response.json();\n\n      setSeasonSchedule(data.MRData.RaceTable.Races);\n      setLoadingSchedule(false);\n    };\n\n    function fillArrayBetweenTwoNumbers(start, end) {\n      setSeasonsYearsList(\n        Array(end - start + 1)\n          .fill()\n          .map((_, i) => start + i)\n          .reverse()\n      );\n    }\n\n    fetchSeasonSchedule();\n    fillArrayBetweenTwoNumbers(FIRST_SEASON, new Date().getFullYear());\n  }, [season]);\n\n  const seasonYearChange = (text) => {\n    setSeason(text);\n    setLoadingSchedule(true);\n  };\n\n  return (\n    <Container>\n      {loadingSeasonSchedule ? (\n        <Container style={{ minHeight: \"700px\" }}>\n          <Row className=\"justify-content-center text-center\">\n            <h1 style={{ marginBottom: \"3%\" }}>Formula One</h1>\n            <Spinner animation=\"border\" />\n          </Row>\n        </Container>\n      ) : (\n        <Container style={{ minHeight: \"700px\" }}>\n          <Row className=\"justify-content-center text-center\">\n            <Col>\n              <h1>Formula One - {season} season</h1>\n            </Col>\n          </Row>\n          <Row\n            className=\"justify-content-center text-center\"\n            style={{ marginBottom: \"2%\" }}\n          >\n            <Col>\n              <Dropdown>\n                <Dropdown.Toggle variant=\"dark\" id=\"dropdown-basic\">\n                  {season}\n                </Dropdown.Toggle>\n                <Dropdown.Menu className=\"dropdown-menu\">\n                  {seasonsYearsList.map((season, index) => (\n                    <Dropdown.Item\n                      key={index}\n                      onClick={(e) => seasonYearChange(e.target.textContent)}\n                    >\n                      {season}\n                    </Dropdown.Item>\n                  ))}\n                </Dropdown.Menu>\n              </Dropdown>\n            </Col>\n          </Row>\n          <ListGroup>\n            {seasonSchedule.map((race, index) => (\n              <ListGroup.Item key={index}>\n                <RaceInfo race={race} />\n              </ListGroup.Item>\n            ))}\n          </ListGroup>\n        </Container>\n      )}\n    </Container>\n  );\n};\n\nexport default Races;\n","import React from \"react\";\nimport NavBar from \"../components/Navbar/Navbar\";\nimport Footer from \"../components/Footer/Footer\";\nimport Races from \"../components/Races/Races\";\n\nconst SeasonSchedule = () => {\n  return (\n    <div>\n      <NavBar />\n      <Races />\n      <Footer />\n    </div>\n  );\n};\n\nexport default SeasonSchedule;\n","import React from \"react\";\nimport Container from \"react-bootstrap/Container\";\nimport Row from \"react-bootstrap/Row\";\nimport Col from \"react-bootstrap/Col\";\nimport { BiError } from \"react-icons/bi\";\nimport { RiArrowGoBackLine } from \"react-icons/ri\";\nimport { Link } from \"react-router-dom\";\n\nconst Error = () => {\n  return (\n    <Container style={{ minHeight: \"700px\" }}>\n      <Row className=\"justify-content-md-center\">\n        <Col md=\"auto\">\n          <BiError size={300} />\n        </Col>\n      </Row>\n      <Row className=\"justify-content-md-center\">\n        <Col md=\"auto\">\n          <h1>Ups... Something went wrong!</h1>\n        </Col>\n      </Row>\n      <Row className=\"justify-content-md-center\">\n        <Col md=\"auto\">\n          <Link to=\"\">\n            <RiArrowGoBackLine size={50} />\n          </Link>\n        </Col>\n      </Row>\n    </Container>\n  );\n};\n\nexport default Error;\n","import React from \"react\";\nimport Error from \"../components/Error/Error\";\nimport NavBar from \"../components/Navbar/Navbar\";\nimport Footer from \"../components/Footer/Footer\";\n\nconst ErrorPage = () => {\n  return (\n    <div>\n      <NavBar />\n      <Error />\n      <Footer />\n    </div>\n  );\n};\n\nexport default ErrorPage;\n","import React, { useState, useEffect } from \"react\";\nimport ConstructorsStandings from \"./ConstructorsStandings\";\nimport DriversStandings from \"./DriversStandings\";\nimport Container from \"react-bootstrap/Container\";\nimport Row from \"react-bootstrap/Row\";\nimport Col from \"react-bootstrap/Col\";\nimport Spinner from \"react-bootstrap/Spinner\";\nimport Dropdown from \"react-bootstrap/Dropdown\";\n\nconst Standings = () => {\n  const FIRST_SEASON = 1950;\n  const [season, setSeason] = useState(\"2021\");\n  const [seasonsYearsList, setSeasonsYearsList] = useState(null);\n  const [driversStandings, setDriversStandings] = useState(null);\n  const [constructorsStandings, setConstructorsStandings] = useState(null);\n  const [loadingConstructorsStandings, setLoadingConstructorsStandings] =\n    useState(true);\n  const [loadingDriversStandings, setLoadingDriversStandings] = useState(true);\n\n  useEffect(() => {\n    const fetchConstructorsStandings = async () => {\n      setLoadingConstructorsStandings(true);\n      const response = await fetch(\n        `https://ergast.com/api/f1/${season}/constructorStandings.json`\n      );\n      const data = await response.json();\n\n      if (data.MRData.StandingsTable.StandingsLists[0] !== undefined) {\n        setConstructorsStandings(\n          data.MRData.StandingsTable.StandingsLists[0].ConstructorStandings\n        );\n      } else {\n        setConstructorsStandings(null);\n      }\n\n      setLoadingConstructorsStandings(false);\n    };\n\n    const fetchDriversStandings = async () => {\n      setLoadingDriversStandings(true);\n      const response = await fetch(\n        `https://ergast.com/api/f1/${season}/driverStandings.json`\n      );\n      const data = await response.json();\n\n      setDriversStandings(\n        data.MRData.StandingsTable.StandingsLists[0].DriverStandings\n      );\n      setLoadingDriversStandings(false);\n    };\n\n    function fillArrayBetweenTwoNumbers(start, end) {\n      setSeasonsYearsList(\n        Array(end - start + 1)\n          .fill()\n          .map((_, i) => start + i)\n          .reverse()\n      );\n    }\n\n    fetchConstructorsStandings();\n    fetchDriversStandings();\n    fillArrayBetweenTwoNumbers(FIRST_SEASON, new Date().getFullYear());\n  }, [season]);\n\n  const seasonYearChange = (text) => {\n    setSeason(text);\n  };\n  return (\n    <div>\n      {!loadingConstructorsStandings && !loadingDriversStandings ? (\n        <Container style={{ minHeight: \"700px\" }}>\n          <Row className=\"justify-content-center text-center\">\n            <Col>\n              <h1>{season} Formula One season</h1>\n            </Col>\n          </Row>\n          <Row\n            className=\"justify-content-center text-center\"\n            style={{ marginBottom: \"2%\" }}\n          >\n            <Col>\n              <Dropdown>\n                <Dropdown.Toggle variant=\"dark\" id=\"dropdown-basic\">\n                  {season}\n                </Dropdown.Toggle>\n                <Dropdown.Menu\n                  style={{ maxHeight: \"500px\", overflowY: \"scroll\" }}\n                >\n                  {seasonsYearsList.map((season, index) => (\n                    <Dropdown.Item\n                      key={index}\n                      onClick={(e) => seasonYearChange(e.target.textContent)}\n                    >\n                      {season}\n                    </Dropdown.Item>\n                  ))}\n                </Dropdown.Menu>\n              </Dropdown>\n            </Col>\n          </Row>\n          <Row className=\"justify-content-center text-center\">\n            <Col md=\"auto\">\n              <h1>Constructors' standings</h1>\n            </Col>\n            <Row>\n              <Col>\n                <ConstructorsStandings\n                  constructorsStandings={constructorsStandings}\n                />\n              </Col>\n            </Row>\n            <Col md=\"auto\">\n              <h1>Drivers' standings</h1>\n            </Col>\n            <Row>\n              <Col>\n                <DriversStandings driversStandings={driversStandings} />\n              </Col>\n            </Row>\n          </Row>\n        </Container>\n      ) : (\n        <Container style={{ minHeight: \"500px\" }}>\n          <Row className=\"justify-content-center text-center\">\n            <h1 style={{ marginBottom: \"3%\" }}>Formula One</h1>\n            <Spinner animation=\"border\" />\n          </Row>\n        </Container>\n      )}\n    </div>\n  );\n};\n\nexport default Standings;\n","import React from \"react\";\nimport Footer from \"../components/Footer/Footer\";\nimport NavBar from \"../components/Navbar/Navbar\";\nimport Standings from \"../components/Stats/Standings/Standings\";\n\nconst StandingsPage = () => {\n  return (\n    <div>\n      <NavBar />\n      <Standings />\n      <Footer />\n    </div>\n  );\n};\n\nexport default StandingsPage;\n","import \"./App.css\";\nimport { Route } from \"react-router-dom\";\nimport { Switch } from \"react-router-dom\";\nimport { BrowserRouter as Router } from \"react-router-dom\";\nimport HomePage from \"./pages/HomePage\";\nimport RaceResult from \"./pages/RaceResult\";\nimport SeasonRaces from \"./pages/SeasonRaces\";\nimport ErrorPage from \"./pages/ErrorPage\";\nimport StandingsPage from \"./pages/StandingsPage\";\n\nfunction App() {\n  return (\n    <Router basename=\"/f1-data\">\n      <Switch>\n        <Route path=\"/\" exact={true} component={HomePage} />\n        <Route\n          path=\"/race/:season/:round\"\n          exact={true}\n          component={RaceResult}\n        />\n        <Route path=\"/schedule\" exact={true} component={SeasonRaces} />\n        <Route path=\"/error\" exact={true} component={ErrorPage} />\n        <Route path=\"/standings\" exact={true} component={StandingsPage} />\n        <Route component={ErrorPage}/>\n      </Switch>\n    </Router>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport reportWebVitals from \"./reportWebVitals\";\nimport \"bootstrap/dist/css/bootstrap.min.css\";\nimport { HashRouter } from \"react-router-dom\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <HashRouter>\n      <App />\n    </HashRouter>\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}