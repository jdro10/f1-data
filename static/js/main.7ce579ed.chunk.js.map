{"version":3,"sources":["App.js","reportWebVitals.js","serviceWorkerRegistration.js","index.js"],"names":["HomePage","lazy","RaceResult","SeasonRaces","ErrorPage","StandingsPage","DriverPage","App","useEffect","todayDate","Date","setHours","tomorrowDate","setDate","getDate","nextUpdateDate","localStorage","getItem","setItem","getTime","clear","caches","keys","then","cacheNames","forEach","cacheName","delete","refreshCache","fallback","basename","path","exact","component","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","registration","onupdatefound","installingWorker","installing","onstatechange","state","controller","console","log","onUpdate","onSuccess","catch","error","ReactDOM","render","StrictMode","document","getElementById","URL","process","href","origin","addEventListener","fetch","headers","response","contentType","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker","serviceWorkerRegistration"],"mappings":"uMAKMA,EAAWC,gBAAK,kBAAM,sEACtBC,EAAaD,gBAAK,kBAAM,qEACxBE,EAAcF,gBAAK,kBAAM,qEACzBG,EAAYH,gBAAK,kBAAM,gEACvBI,EAAgBJ,gBAAK,kBAAM,sEAC3BK,EAAaL,gBAAK,kBAAM,+DAwDfM,MAtDf,WAiCE,OAhCAC,qBAAU,YACR,WACE,IAAMC,EAAY,IAAIC,KACtBD,EAAUE,SAAS,EAAG,EAAG,EAAG,GAE5B,IAAMC,EAAe,IAAIF,KAAKD,GAC9BG,EAAaC,QAAQJ,EAAUK,UAAY,GAC3CF,EAAaD,SAAS,EAAG,EAAG,EAAG,GAE/B,IAAMI,EAAiBC,aAAaC,QAAQ,cAEvCF,GACHC,aAAaE,QAAQ,aAAcN,GAInCG,GACAN,EAAUU,UAAY,IAAIT,KAAKK,GAAgBI,YAE/CH,aAAaI,QACbJ,aAAaE,QAAQ,aAAcN,GACnCS,OAAOC,OAAOC,MAAK,SAAUC,GAC3BA,EAAWC,SAAQ,SAAUC,GAC3BL,OAAOM,OAAOD,UAMtBE,KACC,IAGD,cAAC,WAAD,CAAUC,SAAU,KAApB,SACE,cAAC,IAAD,CAAQC,SAAS,IAAjB,SACE,eAAC,IAAD,WACE,cAAC,IAAD,CAAOC,KAAK,IAAIC,OAAO,EAAMC,UAAWjC,IACxC,cAAC,IAAD,CACE+B,KAAK,uBACLC,OAAO,EACPC,UAAW/B,IAEb,cAAC,IAAD,CAAO6B,KAAK,oBAAoBC,OAAO,EAAMC,UAAW3B,IACxD,cAAC,IAAD,CAAOyB,KAAK,YAAYC,OAAO,EAAMC,UAAW9B,IAChD,cAAC,IAAD,CAAO4B,KAAK,SAASC,OAAO,EAAMC,UAAW7B,IAC7C,cAAC,IAAD,CAAO2B,KAAK,aAAaC,OAAO,EAAMC,UAAW5B,IACjD,cAAC,IAAD,CAAO4B,UAAW7B,YC/Cb8B,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,+BAAqBb,MAAK,YAAkD,IAA/Cc,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,OCPRO,G,MAAcC,QACW,cAA7BC,OAAOC,SAASC,UACe,UAA7BF,OAAOC,SAASC,UAChBF,OAAOC,SAASC,SAASC,MACvB,4DA8BN,SAASC,EAAgBC,EAAOC,GAC9BC,UAAUC,cACPC,SAASJ,GACT1B,MAAK,SAAC+B,GACLA,EAAaC,cAAgB,WAC3B,IAAMC,EAAmBF,EAAaG,WACd,MAApBD,IAGJA,EAAiBE,cAAgB,WACA,cAA3BF,EAAiBG,QACfR,UAAUC,cAAcQ,YAC1BC,QAAQC,IACN,+GAIEZ,GAAUA,EAAOa,UACnBb,EAAOa,SAAST,KAGlBO,QAAQC,IAAI,sCAERZ,GAAUA,EAAOc,WACnBd,EAAOc,UAAUV,WAO5BW,OAAM,SAACC,GACNL,QAAQK,MAAM,4CAA6CA,MCzDjEC,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,IAAD,UACE,cAAC,EAAD,QAGJC,SAASC,eAAe,SDPnB,SAAkBrB,GACvB,GAA6C,kBAAmBC,UAAW,CAEzE,GADkB,IAAIqB,IAAIC,WAAwB7B,OAAOC,SAAS6B,MACpDC,SAAW/B,OAAOC,SAAS8B,OACvC,OAGF/B,OAAOgC,iBAAiB,QAAQ,WAC9B,IAAM3B,EAAK,UAAMwB,WAAN,sBAEP/B,IAoDV,SAAiCO,EAAOC,GACtC2B,MAAM5B,EAAO,CACX6B,QAAS,CAAE,iBAAkB,YAE5BvD,MAAK,SAACwD,GACL,IAAMC,EAAcD,EAASD,QAAQG,IAAI,gBAEnB,MAApBF,EAASG,QACO,MAAfF,IAA8D,IAAvCA,EAAYG,QAAQ,cAE5ChC,UAAUC,cAAcgC,MAAM7D,MAAK,SAAC+B,GAClCA,EAAa+B,aAAa9D,MAAK,WAC7BqB,OAAOC,SAASyC,eAIpBtC,EAAgBC,EAAOC,MAG1Be,OAAM,WACLJ,QAAQC,IACN,oEAxEAyB,CAAwBtC,EAAOC,GAE/BC,UAAUC,cAAcgC,MAAM7D,MAAK,WACjCsC,QAAQC,IACN,+GAKJd,EAAgBC,EAAOC,OCV/BsC,GAKAtD,M","file":"static/js/main.7ce579ed.chunk.js","sourcesContent":["import { useEffect } from \"react\";\nimport { lazy, Suspense } from \"react\";\nimport { Route } from \"react-router-dom\";\nimport { Switch } from \"react-router-dom\";\nimport { HashRouter as Router } from \"react-router-dom\";\nconst HomePage = lazy(() => import(\"./pages/HomePage\"));\nconst RaceResult = lazy(() => import(\"./pages/RaceResult\"));\nconst SeasonRaces = lazy(() => import(\"./pages/SeasonRaces\"));\nconst ErrorPage = lazy(() => import(\"./pages/ErrorPage\"));\nconst StandingsPage = lazy(() => import(\"./pages/StandingsPage\"));\nconst DriverPage = lazy(() => import(\"./pages/DriverPage\"));\n\nfunction App() {\n  useEffect(() => {\n    function refreshCache() {\n      const todayDate = new Date();\n      todayDate.setHours(0, 0, 0, 0);\n\n      const tomorrowDate = new Date(todayDate);\n      tomorrowDate.setDate(todayDate.getDate() + 1);\n      tomorrowDate.setHours(0, 0, 0, 0);\n\n      const nextUpdateDate = localStorage.getItem(\"nextUpdate\");\n\n      if (!nextUpdateDate) {\n        localStorage.setItem(\"nextUpdate\", tomorrowDate);\n      }\n\n      if (\n        nextUpdateDate &&\n        todayDate.getTime() > new Date(nextUpdateDate).getTime()\n      ) {\n        localStorage.clear();\n        localStorage.setItem(\"nextUpdate\", tomorrowDate);\n        caches.keys().then(function (cacheNames) {\n          cacheNames.forEach(function (cacheName) {\n            caches.delete(cacheName);\n          });\n        });\n      }\n    }\n\n    refreshCache();\n  }, []);\n\n  return (\n    <Suspense fallback={null}>\n      <Router basename=\"/\">\n        <Switch>\n          <Route path=\"/\" exact={true} component={HomePage} />\n          <Route\n            path=\"/race/:season/:round\"\n            exact={true}\n            component={RaceResult}\n          />\n          <Route path=\"/driver/:driverId\" exact={true} component={DriverPage} />\n          <Route path=\"/schedule\" exact={true} component={SeasonRaces} />\n          <Route path=\"/error\" exact={true} component={ErrorPage} />\n          <Route path=\"/standings\" exact={true} component={StandingsPage} />\n          <Route component={ErrorPage} />\n        </Switch>\n      </Router>\n    </Suspense>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","const isLocalhost = Boolean(\n  window.location.hostname === \"localhost\" ||\n    window.location.hostname === \"[::1]\" ||\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === \"production\" && \"serviceWorker\" in navigator) {\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      return;\n    }\n\n    window.addEventListener(\"load\", () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        checkValidServiceWorker(swUrl, config);\n\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            \"This web app is being served cache-first by a service \" +\n              \"worker. To learn more, visit https://cra.link/PWA\"\n          );\n        });\n      } else {\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then((registration) => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === \"installed\") {\n            if (navigator.serviceWorker.controller) {\n              console.log(\n                \"New content is available and will be used when all \" +\n                  \"tabs for this page are closed. See https://cra.link/PWA.\"\n              );\n\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              console.log(\"Content is cached for offline use.\");\n\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch((error) => {\n      console.error(\"Error during service worker registration:\", error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  fetch(swUrl, {\n    headers: { \"Service-Worker\": \"script\" },\n  })\n    .then((response) => {\n      const contentType = response.headers.get(\"content-type\");\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf(\"javascript\") === -1)\n      ) {\n        navigator.serviceWorker.ready.then((registration) => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        \"No internet connection found. App is running in offline mode.\"\n      );\n    });\n}\n\nexport function unregister() {\n  if (\"serviceWorker\" in navigator) {\n    navigator.serviceWorker.ready\n      .then((registration) => {\n        registration.unregister();\n      })\n      .catch((error) => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport reportWebVitals from \"./reportWebVitals\";\nimport \"bootstrap/dist/css/bootstrap.min.css\";\nimport { HashRouter } from \"react-router-dom\";\nimport * as serviceWorkerRegistration from \"./serviceWorkerRegistration\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <HashRouter>\n      <App />\n    </HashRouter>\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\nserviceWorkerRegistration.register();\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}