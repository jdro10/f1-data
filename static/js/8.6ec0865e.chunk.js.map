{"version":3,"sources":["components/Cards/GenericCard.js","components/Stats/MainFeed/PreviousRaceCard.js","components/Stats/MainFeed/NextRaceCard.js","components/Stats/MainFeed/PreviousRaceStats.js","components/Stats/MainFeed/DriversStandingsCard.js","components/Stats/MainFeed/ConstructorsStandingsCard.js","components/Stats/MainFeed/MainFeed.js","pages/HomePage.js","data/CountryCodeNationality.js","components/Navbar/Navbar.js","components/Footer/Footer.js","data/TeamColors.js","components/TeamColor/TeamColor.js","helpers/Helpers.js","components/Countdown/ClockCountdown.js","components/Stats/Standings/DriversStandings.js","components/Stats/Standings/ConstructorsStandings.js"],"names":["GenericCard","cardTitle","cardBody","cardFooter","cardHeight","variant","Card","style","height","className","bg","text","Header","Body","Row","undefined","Footer","boldFont","fontWeight","PreviousRaceCard","lastRace","useState","countryCode","setCountryCode","loadingCountryCode","setLoadingCountryCode","useEffect","a","fetch","MRData","RaceTable","Races","Circuit","Location","country","then","res","json","result","alpha2Code","fetchCountryCode","round","raceName","toUpperCase","circuitName","date","getLocalRaceDate","time","toLowerCase","marginTop","locality","to","season","Button","NextRaceCard","nextRace","catch","error","CountriesCodeNationality","marginBottom","driverName","margin","padding","display","PreviousRaceStats","numberOfRaces","fastestLap","setFastestLap","polePosition","setPolePosition","loadingPolePosition","setLoadingPolePosition","QualifyingResults","fetchPolePosition","Results","forEach","lap","FastestLap","rank","Table","responsive","slice","map","driver","index","position","Col","xs","Driver","nationality","TeamColor","constructorId","Constructor","givenName","familyName","fontSize","name","points","Time","Q3","DriversStandingsCard","driversStandings","DriversStandings","overflow","overflowY","ConstructorsStandingsCard","constructorsStandings","ConstructorsStandings","cardsSpacing","MainFeed","setNextRace","setLastRace","setDriversStandings","loadingNextRace","setLoadingNextRace","loadingLastRace","setLoadingLastRace","setConstructorsStandings","loadingTeamsStandings","setLoadingTeamsStandings","loadingDriversStandings","setLoadingDriversStandings","fetchPreviousRaceResult","fetchNextRaceData","fetchConstructorsStandings","StandingsTable","StandingsLists","ConstructorStandings","fetchDriversStandings","DriverStandings","Container","minHeight","md","Spinner","animation","lg","HomePage","British","Finnish","Dutch","Mexican","Spanish","Australian","Monegasque","French","German","Japanese","Canadian","Italian","Russian","Austrian","Swiss","American","Thai","Swedish","Portuguese","Brazilian","Hungarian","Argentine","Belgian","Belgium","Danish","Liechtensteiner","Irish","Chilean","Venezuelan","Colombian","Czech","Malaysian","Indian","Polish","Indonesian","Rhodesian","Russia","Korea","NavBar","Brand","size","textDecoration","Collapse","href","id","textAlign","color","TeamColors","red_bull","williams","mercedes","mclaren","aston_martin","alphatauri","alpine","ferrari","haas","alfa","renault","racing_point","width","backgroundColor","hasOwnProperty","raceDate","Date","getHours","getMinutes","ClockCountdown","now","getTime","split","renderer","days","hours","minutes","seconds","completed","sm","history","useHistory","cursor","onClick","driverId","push","permanentNumber","Constructors","wins","constructor"],"mappings":"8NA+BeA,EA3BK,SAAC,GAMd,IALLC,EAKI,EALJA,UACAC,EAII,EAJJA,SACAC,EAGI,EAHJA,WACAC,EAEI,EAFJA,WACAC,EACI,EADJA,QAEA,OACE,eAACC,EAAA,EAAD,CACEC,MAAO,CAAEC,OAAQJ,GACjBK,UAAU,cACVC,GAAIL,EACJM,KAAkB,UAAZN,EAAsB,OAAS,QAJvC,UAME,cAACC,EAAA,EAAKM,OAAN,UACE,4BAAIX,MAEN,cAACK,EAAA,EAAKO,KAAN,UACE,cAACC,EAAA,EAAD,CAAKL,UAAU,4BAAf,SAA4CP,WAE9Ba,IAAfZ,EACC,cAACG,EAAA,EAAKU,OAAN,UAAcb,IACZ,S,+BCnBJc,EAAW,CACfC,WAAY,KAqECC,EAlEU,SAAC,GAAkB,IAAhBC,EAAe,EAAfA,SAC1B,EAAsCC,mBAAS,MAA/C,mBAAOC,EAAP,KAAoBC,EAApB,KACA,EAAoDF,oBAAS,GAA7D,mBAAOG,EAAP,KAA2BC,EAA3B,KAiBA,OAfAC,qBAAU,YACc,uCAAG,sBAAAC,EAAA,sEACjBC,MAAM,yCAAD,OACgCR,EAASS,OAAOC,UAAUC,MAAM,GAAGC,QAAQC,SAASC,QADpF,mBAGRC,MAAK,SAACC,GAAD,OAASA,EAAIC,UAClBF,MAAK,SAACG,GACLf,EAAee,EAAO,GAAGC,YACzBd,GAAsB,MAPH,2CAAH,qDAWtBe,KACC,CAACpB,EAASS,OAAOC,UAAUC,QAG5B,cAAC,EAAD,CACE9B,UAAU,gBACVC,SACE,gCACE,wCAAWkB,EAASS,OAAOC,UAAUW,SACrC,oBAAIlC,MAAOU,EAAX,SACGG,EAASS,OAAOC,UAAUC,MAAM,GAAGW,SAASC,gBAE/C,6BAAKvB,EAASS,OAAOC,UAAUC,MAAM,GAAGC,QAAQY,cAChD,6BAAKxB,EAASS,OAAOC,UAAUC,MAAM,GAAGc,OACxC,6BACGC,YACC1B,EAASS,OAAOC,UAAUC,MAAM,GAAGc,KACnCzB,EAASS,OAAOC,UAAUC,MAAM,GAAGgB,QAGtCvB,EAAqB,KACpB,qCACE,uBACA,cAAC,IAAD,CACEF,YAAaA,EAAY0B,cACzBxC,OAAQ,SAId,oBAAID,MAAO,CAAE0C,UAAW,MAAxB,SACG7B,EAASS,OAAOC,UAAUC,MAAM,GAAGC,QAAQC,SAASC,UAEvD,6BACGd,EAASS,OAAOC,UAAUC,MAAM,GAAGC,QAAQC,SAASiB,cAI3D/C,WACE,cAAC,IAAD,CACEgD,GAAE,gBAAW/B,EAASS,OAAOC,UAAUsB,OAArC,YAA+ChC,EAASS,OAAOC,UAAUW,OAD7E,SAGE,cAACY,EAAA,EAAD,CAAQhD,QAAQ,OAAhB,gCAGJD,WAAW,QACXC,QAAQ,W,gBC/DRY,EAAW,CACfC,WAAY,KA0DCoC,EAvDM,SAAC,GAAkB,IAAhBC,EAAe,EAAfA,SACtB,EAAsClC,mBAAS,MAA/C,mBAAOC,EAAP,KAAoBC,EAApB,KACA,EAAoDF,oBAAS,GAA7D,mBAAOG,EAAP,KAA2BC,EAA3B,KAyBA,OAvBAC,qBAAU,YACc,uCAAG,sBAAAC,EAAA,sEACjBC,MAAM,yCAAD,OACgC2B,EAASvB,QAAQC,SAASC,QAD1D,mBAGRC,MAAK,SAACC,GAAD,OAASA,EAAIC,UAClBF,MAAK,SAACG,GACLf,EAAee,EAAO,GAAGC,YACzBd,GAAsB,MAEvB+B,OAAM,SAACC,GACNlC,EACEmC,IACEH,EAASvB,QAAQC,SAASC,SAC1Bc,eAEJvB,GAAsB,MAfH,2CAAH,qDAmBtBe,KACC,CAACe,EAASvB,QAAQC,SAASC,UAG5B,cAAC,EAAD,CACEjC,UAAU,YACVC,SACE,qCACE,wCAAWqD,EAASd,SACpB,oBAAIlC,MAAOU,EAAX,SAAsBsC,EAASb,SAASC,gBACxC,6BAAKY,EAASvB,QAAQY,cACtB,6BAAKW,EAASV,OACd,6BAAKC,YAAiBS,EAASV,KAAMU,EAASR,QAC7CvB,EAAqB,KACpB,cAAC,IAAD,CAAYF,YAAaA,EAAY0B,cAAexC,OAAQ,MAE9D,sBACA,cAAC,IAAD,CAAeqC,KAAMU,EAASV,KAAME,KAAMQ,EAASR,UAGvD5C,WACE,cAAC,IAAD,CAAMgD,GAAE,gBAAWI,EAASH,OAApB,YAA8BG,EAASd,OAA/C,SACE,cAACY,EAAA,EAAD,CAAQhD,QAAQ,OAAhB,gCAGJD,WAAW,QACXC,QAAQ,W,wBCrDRY,G,MAAW,CACfC,WAAY,IACZ+B,UAAW,OACXU,aAAc,SAGVC,EAAa,CACjB1C,WAAY,IACZ2C,OAAQ,MACRC,QAAS,MACTC,QAAS,SACTd,UAAW,QAyMEe,EAtMW,SAAC,GAAiC,IAA/B5C,EAA8B,EAA9BA,SAAU6C,EAAoB,EAApBA,cACrC,EAAoC5C,mBAAS,MAA7C,mBAAO6C,EAAP,KAAmBC,EAAnB,KACA,EAAwC9C,mBAAS,MAAjD,mBAAO+C,EAAP,KAAqBC,EAArB,KACA,EAAsDhD,oBAAS,GAA/D,mBAAOiD,EAAP,KAA4BC,EAA5B,KAiCA,OA/BA7C,qBAAU,YAUe,uCAAG,sBAAAC,EAAA,sEAClBC,MAAM,6BAAD,OACoBR,EAASS,OAAOC,UAAUsB,OAD9C,YACwDhC,EAASS,OAAOC,UAAUW,MADlF,qBAGRN,MAAK,SAACC,GAAD,OAASA,EAAIC,UAClBF,MAAK,SAACG,GACL+B,EACE/B,EAAOT,OAAOC,UAAUC,MAAM,GAAGyC,kBAAkB,IAErDD,GAAuB,MATH,2CAAH,qDAavBE,GArBErD,EAASS,OAAOC,UAAUC,MAAM,GAAG2C,QAAQC,SAAQ,SAACC,GAC9CA,EAAIC,YAAsC,MAAxBD,EAAIC,WAAWC,MACnCX,EAAcS,QAqBnB,CACDxD,EAASS,OAAOC,UAAUsB,OAC1BhC,EAASS,OAAOC,UAAUW,MAC1BrB,EAASS,OAAOC,UAAUC,QAI1B,cAAC,EAAD,CACE9B,UAAU,gBACVC,SACE,gCACE,oBAAIK,MAAOqD,EAAX,oBACA,cAACmB,EAAA,EAAD,CAAOC,YAAU,EAAjB,SACE,uBAAOvE,UAAU,yBAAjB,SACGW,EAASS,OAAOC,UAAUC,MAAM,GAAG2C,QAAQO,MAAM,EAAG,GAAGC,KACtD,SAACC,EAAQC,GAAT,OACE,qBAAgB3E,UAAU,eAA1B,UACE,6BAAK0E,EAAOE,WACZ,6BACE,eAACvE,EAAA,EAAD,WACE,cAACwE,EAAA,EAAD,CAAKC,GAAI,EAAG9E,UAAU,oBAAtB,SACE,cAAC,IAAD,CACEa,YAAaoC,IACXyB,EAAOK,OAAOC,aACdzC,cACFxC,OAAQ,OAGZ,cAAC8E,EAAA,EAAD,CAAKC,GAAI,EAAT,SACE,cAACG,EAAA,EAAD,CACEC,cAAeR,EAAOS,YAAYD,cAClCnF,OAAO,WAGX,eAAC8E,EAAA,EAAD,CAAKC,GAAI,EAAG9E,UAAU,aAAtB,UACE,eAACK,EAAA,EAAD,WACE,eAACwE,EAAA,EAAD,CAAK7E,UAAU,SAAf,UACG0E,EAAOK,OAAOK,UAAW,IAC1B,mBAAGtF,MAAOqD,EAAV,SACGuB,EAAOK,OAAOM,WAAWnD,mBAG9B,cAAC2C,EAAA,EAAD,CAAK7E,UAAU,SAAf,SACE,mBAAGF,MAAOqD,EAAV,SACGuB,EAAOK,OAAOM,WAAWnD,qBAIhC,cAAC7B,EAAA,EAAD,UACE,cAACwE,EAAA,EAAD,CAAK/E,MAAO,CAAEwF,SAAU,QAAxB,SACGZ,EAAOS,YAAYI,iBAM9B,mCAAMb,EAAOc,YAxCNb,UA8CjB,oBAAI7E,MAAOU,EAAX,yCACA,cAAC8D,EAAA,EAAD,CAAOC,YAAU,EAAjB,SACE,kCACkB,OAAfd,EAAsB,KACrB,qBAAIzD,UAAU,eAAd,UACE,oCACA,6BACE,eAACK,EAAA,EAAD,WACE,cAACwE,EAAA,EAAD,CAAKC,GAAI,EAAG9E,UAAU,oBAAtB,SACE,cAAC,IAAD,CACEa,YAAaoC,IACXQ,EAAWsB,OAAOC,aAClBzC,cACFxC,OAAQ,OAGZ,cAAC8E,EAAA,EAAD,CAAKC,GAAI,EAAT,SACE,cAACG,EAAA,EAAD,CACEC,cAAezB,EAAW0B,YAAYD,cACtCnF,OAAO,WAGX,eAAC8E,EAAA,EAAD,CAAKC,GAAI,EAAG9E,UAAU,aAAtB,UACE,eAACK,EAAA,EAAD,WACE,eAACwE,EAAA,EAAD,CAAK7E,UAAU,SAAf,UACGyD,EAAWsB,OAAOK,UAAW,IAC9B,mBAAGtF,MAAOqD,EAAV,SACGM,EAAWsB,OAAOM,WAAWnD,mBAGlC,cAAC2C,EAAA,EAAD,CAAK7E,UAAU,SAAf,SACE,mBAAGF,MAAOqD,EAAV,SACGM,EAAWsB,OAAOM,WAAWnD,qBAIpC,cAAC7B,EAAA,EAAD,UACE,cAACwE,EAAA,EAAD,CAAK/E,MAAO,CAAEwF,SAAU,QAAxB,SACG7B,EAAW0B,YAAYI,iBAMlC,6BAAK9B,EAAWW,WAAWqB,KAAKnD,UAGnCuB,EAAsB,KACrB,qBAAI7D,UAAU,eAAd,UACE,oCACA,6BACE,eAACK,EAAA,EAAD,WACE,cAACwE,EAAA,EAAD,CAAKC,GAAI,EAAG9E,UAAU,oBAAtB,SACE,cAAC,IAAD,CACEa,YAAaoC,IACXU,EAAaoB,OAAOC,aACpBzC,cACFxC,OAAQ,OAGZ,cAAC8E,EAAA,EAAD,CAAKC,GAAI,EAAT,SACE,cAACG,EAAA,EAAD,CACEC,cAAevB,EAAawB,YAAYD,cACxCnF,OAAO,WAGX,eAAC8E,EAAA,EAAD,CAAKC,GAAI,EAAG9E,UAAU,aAAtB,UACE,eAACK,EAAA,EAAD,WACE,eAACwE,EAAA,EAAD,CAAK7E,UAAU,SAAf,UACG2D,EAAaoB,OAAOK,UAAW,IAChC,mBAAGtF,MAAOqD,EAAV,SACGQ,EAAaoB,OAAOM,WAAWnD,mBAGpC,cAAC2C,EAAA,EAAD,CAAK7E,UAAU,SAAf,SACE,mBAAGF,MAAOqD,EAAV,SACGQ,EAAaoB,OAAOM,WAAWnD,qBAItC,cAAC7B,EAAA,EAAD,UACE,cAACwE,EAAA,EAAD,CAAK/E,MAAO,CAAEwF,SAAU,QAAxB,SACG3B,EAAawB,YAAYI,iBAMpC,6BAAK5B,EAAa+B,gBAO9BhG,WACE,yCACUiB,EAASS,OAAOC,UAAUW,MADpC,MAC8CwB,KAGhD7D,WAAW,QACXC,QAAQ,W,QC1LC+F,EAzBc,SAAC,GAA0B,IAAxBC,EAAuB,EAAvBA,iBAC9B,OACE,cAAC,EAAD,CACEpG,UAAU,qBACVC,SACE,cAACoG,EAAA,EAAD,CACE/F,MAAO,CACLgG,SAAU,SACVC,UAAW,SACXhG,OAAQ,SAEV6F,iBAAkBA,IAGtBjG,WAAW,QACXC,QAAQ,QACRF,WACE,cAAC,IAAD,CAAMgD,GAAG,aAAT,SACE,cAACE,EAAA,EAAD,CAAQhD,QAAQ,OAAhB,iC,QCOKoG,EAzBmB,SAAC,GAA+B,IAA7BC,EAA4B,EAA5BA,sBACnC,OACE,cAAC,EAAD,CACEzG,UAAU,0BACVC,SACE,cAACyG,EAAA,EAAD,CACEpG,MAAO,CACLgG,SAAU,SACVC,UAAW,SACXhG,OAAQ,SAEVkG,sBAAuBA,IAG3BvG,WACE,cAAC,IAAD,CAAMgD,GAAG,aAAT,SACE,cAACE,EAAA,EAAD,CAAQhD,QAAQ,OAAhB,8BAGJD,WAAW,QACXC,QAAQ,WCfRuG,EAAe,CACnBjD,aAAc,QA2GDkD,EAxGE,WACf,IACA,EAAgCxF,mBAAS,MAAzC,mBAAOkC,EAAP,KAAiBuD,EAAjB,KACA,EAAgCzF,mBAAS,MAAzC,mBAAOD,EAAP,KAAiB2F,EAAjB,KACA,EAAgD1F,mBAAS,MAAzD,mBAAOgF,EAAP,KAAyBW,EAAzB,KACA,EAA8C3F,oBAAS,GAAvD,mBAAO4F,EAAP,KAAwBC,EAAxB,KACA,EAA8C7F,oBAAS,GAAvD,mBAAO8F,EAAP,KAAwBC,EAAxB,KACA,EAA0D/F,mBAAS,MAAnE,mBAAOqF,EAAP,KAA8BW,EAA9B,KACA,EAA0DhG,oBAAS,GAAnE,mBAAOiG,EAAP,KAA8BC,EAA9B,KACA,EAA8DlG,oBAAS,GAAvE,mBAAOmG,EAAP,KAAgCC,EAAhC,KAiDA,OA/CA/F,qBAAU,WACR,IAAMgG,EAAuB,uCAAG,sBAAA/F,EAAA,sEACxBC,MAAM,uDACTO,MAAK,SAACC,GAAD,OAASA,EAAIC,UAClBF,MAAK,SAACG,GACLyE,EAAYzE,GACZ8E,GAAmB,MALO,2CAAH,qDASvBO,EAAiB,uCAAG,WAAOlF,GAAP,SAAAd,EAAA,sEAClBC,MAAM,+CACTO,MAAK,SAACC,GAAD,OAASA,EAAIC,UAClBF,MAAK,SAACG,GACLwE,EAAYxE,EAAOT,OAAOC,UAAUC,MAAM,IAC1CmF,GAAmB,MALC,2CAAH,sDASjBU,EAA0B,uCAAG,sBAAAjG,EAAA,sEAC3BC,MAAM,+DACTO,MAAK,SAACC,GAAD,OAASA,EAAIC,UAClBF,MAAK,SAACG,GACL+E,EACE/E,EAAOT,OAAOgG,eAAeC,eAAe,GAAGC,sBAEjDR,GAAyB,MAPI,2CAAH,qDAW1BS,EAAqB,uCAAG,sBAAArG,EAAA,sEACtBC,MAAM,0DACTO,MAAK,SAACC,GAAD,OAASA,EAAIC,UAClBF,MAAK,SAACG,GACL0E,EACE1E,EAAOT,OAAOgG,eAAeC,eAAe,GAAGG,iBAEjDR,GAA2B,MAPH,2CAAH,qDAW3BC,IACAC,IACAK,IACAJ,MACC,IAGD,eAACM,EAAA,EAAD,CAAW3H,MAAO,CAAE4H,UAAW,SAA/B,UACE,cAACrH,EAAA,EAAD,CAAKL,UAAU,qCAAf,SACE,cAAC6E,EAAA,EAAD,CAAK8C,GAAG,OAAR,SACE,+BACGjB,EAAkB,KAAO/F,EAASS,OAAOC,UAAUsB,OADtD,sBAMH+D,GAAmBF,EAClB,cAACnG,EAAA,EAAD,CAAKL,UAAU,qCAAf,SACE,cAAC4H,EAAA,EAAD,CAASC,UAAU,aAGrB,eAACxH,EAAA,EAAD,CAAKL,UAAU,qCAAf,UACE,cAAC6E,EAAA,EAAD,CAAKiD,GAAI,GAAIhI,MAAOqG,EAApB,SACE,cAAC,EAAD,CAAcrD,SAAUA,MAE1B,cAAC+B,EAAA,EAAD,CAAKC,GAAI,GAAIgD,GAAI,EAAGhI,MAAOqG,EAA3B,SACE,cAAC,EAAD,CAAkBxF,SAAUA,MAE9B,cAACkE,EAAA,EAAD,CAAKC,GAAI,GAAIgD,GAAI,EAAGhI,MAAOqG,EAA3B,SACE,cAAC,EAAD,CACExF,SAAUA,EACV6C,cAlFkB,YAuFzBuD,GAA2BF,EAAwB,KAClD,eAACxG,EAAA,EAAD,WACE,cAACwE,EAAA,EAAD,CAAK/E,MAAOqG,EAAZ,SACE,cAAC,EAAD,CAAsBP,iBAAkBA,MAE1C,cAACf,EAAA,EAAD,CAAK/E,MAAOqG,EAAZ,SACE,cAAC,EAAD,CACEF,sBAAuBA,aC9FtB8B,UAVE,WACf,OACE,gCACE,cAAC,IAAD,IACA,cAAC,EAAD,IACA,cAACxH,EAAA,EAAD,S,gCCXN,kCAAO,IAAM0C,EAA2B,CACtC+E,QAAS,KACTC,QAAS,KACTC,MAAO,KACPC,QAAS,KACTC,QAAS,KACTC,WAAY,KACZC,WAAY,KACZC,OAAQ,KACRC,OAAQ,KACRC,SAAU,KACVC,SAAU,KACVC,QAAS,KACTC,QAAS,KACTC,SAAU,KACVC,MAAO,KACPC,SAAU,KACVC,KAAM,KACN,gBAAiB,KACjB,cAAe,KACfC,QAAS,KACTC,WAAY,KACZC,UAAW,KACXC,UAAW,KACXC,UAAW,KACXC,QAAS,KACTC,QAAS,KACT,gBAAiB,KACjBC,OAAQ,KACRC,gBAAiB,KACjB,YAAa,KACbC,MAAO,KACPC,QAAS,KACTC,WAAY,KACZC,UAAW,KACXC,MAAO,KACPC,UAAW,KACXC,OAAQ,KACRC,OAAQ,KACRC,WAAY,KACZC,UAAW,KACXC,OAAQ,KACRC,MAAQ,O,gCC1CV,+DAkCeC,IA1BA,WACb,OACE,cAAC,IAAD,CAAQtK,UAAU,SAASC,GAAG,OAAOL,QAAQ,OAA7C,SACE,eAAC,IAAD,WACE,cAAC,IAAO2K,MAAR,UACE,cAAC,IAAD,CAAiBC,KAAM,OAEzB,cAAC,IAAD,CAAM9H,GAAG,IAAI5C,MAAO,CAAE2K,eAAgB,QAAtC,SACE,cAAC,IAAOF,MAAR,qBAEF,cAAC,IAAD,CAAM7H,GAAG,YAAY5C,MAAO,CAAE2K,eAAgB,QAA9C,SACE,cAAC,IAAOF,MAAR,sBAEF,cAAC,IAAD,CAAM7H,GAAG,aAAa5C,MAAO,CAAE2K,eAAgB,QAA/C,SACE,cAAC,IAAOF,MAAR,0BAEF,cAAC,IAAOG,SAAR,CAAiB1K,UAAU,sBAA3B,SACE,cAAC,IAAOuK,MAAR,CAAcI,KAAK,4BAA4B,aAAW,SAA1D,SACE,cAAC,IAAD,CAAcH,KAAM,gB,qDC1BhC,sFAgIejK,IAhHA,WACb,OACE,iCACE,eAAC,IAAD,WACE,eAAC,IAAD,CAAKP,UAAU,qCAAqC8E,GAAG,OAAO8F,GAAG,MAAjE,UACE,cAAC,IAAD,UACE,cAAC,IAAD,CAAiBJ,KAAM,OAEzB,cAAC,IAAD,UACE,cAAC,IAAD,CAAUA,KAAM,OAElB,cAAC,IAAD,UACE,cAAC,IAAD,CAASA,KAAM,OAEjB,cAAC,IAAD,UACE,cAAC,IAAD,CAAkBA,KAAM,OAE1B,cAAC,IAAD,UACE,cAAC,IAAD,CAASA,KAAM,OAEjB,cAAC,IAAD,UACE,cAAC,IAAD,CAAWA,KAAM,OAEnB,cAAC,IAAD,UACE,cAAC,IAAD,CAAaA,KAAM,OAErB,cAAC,IAAD,UACE,cAAC,IAAD,CAAWA,KAAM,OAEnB,cAAC,IAAD,UACE,cAAC,IAAD,CAAWA,KAAM,OAEnB,cAAC,IAAD,UACE,cAAC,IAAD,CAAoBA,KAAM,UAG9B,cAAC,IAAD,CAAKxK,UAAU,4BAA4B8E,GAAG,OAAO8F,GAAG,YACxD,cAAC,IAAD,CAAK5K,UAAU,4BAAf,SACE,cAAC,IAAD,CAAK2H,GAAG,OAAO7H,MAAO,CAAE+K,UAAW,UAAnC,SACE,yCAGJ,cAAC,IAAD,CAAK7K,UAAU,4BAAf,SACE,eAAC,IAAD,CAAK2H,GAAG,OAAO7H,MAAO,CAAE+K,UAAW,UAAnC,gDACsC,IACpC,mBAAGF,KAAK,yBAAyB7K,MAAO,CAAEgL,MAAO,SAAjD,wBAFF,SAQF,cAAC,IAAD,CAAK9K,UAAU,4BAAf,SACE,eAAC,IAAD,CAAK2H,GAAG,OAAO7H,MAAO,CAAE+K,UAAW,UAAnC,+CACqC,IACnC,mBAAGF,KAAK,4BAA4B7K,MAAO,CAAEgL,MAAO,SAApD,gCAFF,SAQF,cAAC,IAAD,CAAK9K,UAAU,4BAAf,SACE,eAAC,IAAD,CAAK2H,GAAG,OAAO7H,MAAO,CAAE+K,UAAW,UAAnC,uEAC6D,IAC3D,mBACEF,KAAK,0CACL7K,MAAO,CAAEgL,MAAO,SAFlB,2BAFF,SAWF,uBACA,cAAC,IAAD,CAAK9K,UAAU,4BAAf,SACE,cAAC,IAAD,CAAK2H,GAAG,OAAO7H,MAAO,CAAE+K,UAAW,UAAnC,SACE,gDAGJ,cAAC,IAAD,CAAK7K,UAAU,4BAAf,SACE,cAAC,IAAD,CAAK2H,GAAG,OAAO7H,MAAO,CAAE+K,UAAW,UAAnC,sFAKF,cAAC,IAAD,CAAK7K,UAAU,4BAAf,SACE,cAAC,IAAD,CAAK2H,GAAG,OAAO7H,MAAO,CAAE+K,UAAW,UAAnC,6FAKF,cAAC,IAAD,CAAK7K,UAAU,4BAAf,SACE,cAAC,IAAD,CAAK2H,GAAG,OAAO7H,MAAO,CAAE+K,UAAW,UAAnC,oHAKF,uBACA,cAAC,IAAD,CAAK7K,UAAU,4BAAf,SACE,cAAC,IAAD,CAAK2H,GAAI,EAAT,SACE,mBAAG7H,MAAO,CAAE+K,UAAW,UAAvB,6P,8DCnHCE,EAAa,CACxBC,SAAU,UACVC,SAAU,UACVC,SAAU,UACVC,QAAS,UACTC,aAAc,UACdC,WAAY,UACZC,OAAQ,UACRC,QAAS,UACTC,KAAM,UACNC,KAAM,UACNC,QAAS,UACTC,aAAc,W,OCKD1G,IAdG,SAAC,GAAwC,IAAtCC,EAAqC,EAArCA,cAAqC,IAAtBnF,cAAsB,MAAb,OAAa,EACxD,OACE,qBACED,MAAO,CACL8L,MAAO,MACP7L,OAAQA,EACR8L,gBAAiBd,EAAWe,eAAe5G,GACvC6F,EAAW7F,GACX,e,qDCXL,SAAS7C,EAAiBD,EAAME,GACrC,IAAMyJ,EAAW,IAAIC,KAAK5J,EAAO,IAAME,GAKvC,OAJeyJ,EAASE,WAAa,GAAK,IAAM,IAAMF,EAASE,WAIhD,MAFZF,EAASG,aAAe,GAAK,IAAM,IAAMH,EAASG,cAEtB,MANjC,mC,gCCAA,gCAkDeC,IA9CQ,SAAC,GAAoB,IAAlB/J,EAAiB,EAAjBA,KAAME,EAAW,EAAXA,KAiC9B,OACE,cAAC,IAAD,CACEF,KACE4J,KAAKI,OACJ,IAAIJ,KAAK5J,GAAMiK,UACO,KAArB/J,EAAKgK,MAAM,KAAK,IAChB,IAAIN,MAAOK,WAEfE,SAxCa,SAAC,GAAkD,IAAhDC,EAA+C,EAA/CA,KAAMC,EAAyC,EAAzCA,MAAOC,EAAkC,EAAlCA,QAASC,EAAyB,EAAzBA,QACxC,OADiE,EAAhBC,UAG7C,eAAC,IAAD,WACE,kDACA,6DAKF,qCACE,eAAC,IAAD,CAAK9H,GAAI,EAAG+H,GAAI,EAAG/E,GAAI,EAAvB,UACE,6BAAK0E,IACL,yCAEF,eAAC,IAAD,CAAK1H,GAAI,EAAG+H,GAAI,EAAG/E,GAAI,EAAvB,UACE,6BAAK2E,IACL,wCAEF,eAAC,IAAD,CAAK3H,GAAI,EAAG+H,GAAI,EAAG/E,GAAI,EAAvB,UACE,6BAAK4E,IACL,wCAEF,eAAC,IAAD,CAAK5H,GAAI,EAAG+H,GAAI,EAAG/E,GAAI,EAAvB,UACE,6BAAK6E,IACL,gD,gCC9BZ,+EAUMnM,EAAW,CACfC,WAAY,IACZ2C,OAAQ,MACRC,QAAS,MACTC,QAAS,UAgFIuC,IA7EU,SAAC,GAAiC,IAA/B/F,EAA8B,EAA9BA,MAAO8F,EAAuB,EAAvBA,iBAC3BkH,EAAUC,cAMhB,OACE,qBAAKjN,MAAOA,EAAZ,SACE,eAAC,IAAD,CAAOE,UAAU,cAAcuE,WAAW,KAA1C,UACE,gCACE,+BACE,qCACA,oBAAIvE,UAAU,SAAd,gBACA,2CACA,oBAAIA,UAAU,SAAd,kBACA,6CAGJ,gCACG4F,EAAiBnB,KAAI,SAACC,EAAQC,GAAT,OACpB,qBAEE3E,UAAU,eACVF,MAAO,CAAEkN,OAAQ,WACjBC,QAAS,kBAtBHC,EAsBkBxI,EAAOK,OAAOmI,cArBhDJ,EAAQK,KAAR,kBAAwBD,IADT,IAACA,GAkBR,UAME,6BAAKxI,EAAOE,WACZ,oBAAI5E,UAAU,SAAd,SAAwB0E,EAAOK,OAAOqI,kBACtC,6BACE,eAAC,IAAD,CAAKpN,UAAU,MAAf,UACE,cAAC,IAAD,CAAK8E,GAAI,EAAG9E,UAAU,oBAAtB,SACE,cAAC,IAAD,CACEa,YAAaoC,IACXyB,EAAOK,OAAOC,aACdzC,cACFxC,OAAQ,OAGZ,cAAC,IAAD,CAAK+E,GAAI,EAAT,SACE,cAAC,IAAD,CACEI,cAAeR,EAAO2I,aAAa,GAAGnI,cACtCnF,OAAO,WAGX,eAAC,IAAD,CAAK+E,GAAI,EAAG9E,UAAU,aAAtB,UACE,eAAC,IAAD,WACE,cAAC,IAAD,CAAKA,UAAU,SAAf,SACE,mBAAGF,MAAOU,EAAV,SACGkE,EAAOK,OAAOM,WAAWnD,kBAG9B,eAAC,IAAD,CAAKlC,UAAU,SAAf,UACG0E,EAAOK,OAAOK,UAAW,IAC1B,mBAAGtF,MAAOU,EAAV,SACGkE,EAAOK,OAAOM,WAAWnD,sBAIhC,cAAC,IAAD,UACE,cAAC,IAAD,CAAKpC,MAAO,CAAEwF,SAAU,QAAxB,SACGZ,EAAO2I,aAAa,GAAG9H,iBAMlC,oBAAIvF,UAAU,SAAd,SAAwB0E,EAAO4I,OAC/B,6BAAK5I,EAAOc,WA9CPb,e,gCCvCnB,wEAkEeuB,IAzDe,SAAC,GAAsC,IAApCpG,EAAmC,EAAnCA,MAAOmG,EAA4B,EAA5BA,sBACtC,OACE,qBAAKnG,MAAOA,EAAZ,SAC6B,OAA1BmG,EACC,eAAC,IAAD,CAAO1B,WAAW,KAAlB,UACE,gCACE,+BACE,qCACA,sCACA,oBAAIvE,UAAU,SAAd,kBACA,6CAGJ,gCACGiG,EAAsBxB,KAAI,SAAC8I,EAAa5I,GAAd,OACzB,+BACE,6BAAK4I,EAAY3I,WACjB,6BACE,eAAC,IAAD,WACE,cAAC,IAAD,CAAKE,GAAI,EAAT,SACE,cAAC,IAAD,CACEjE,YAAaoC,IACXsK,EAAYpI,YAAYH,aACxBzC,cACFxC,OAAQ,OAGZ,cAAC,IAAD,CAAK+E,GAAI,EAAT,SACE,cAAC,IAAD,CACEI,cAAeqI,EAAYpI,YAAYD,kBAG3C,cAAC,IAAD,CAAKJ,GAAI,EAAG9E,UAAU,aAAtB,SACGuN,EAAYpI,YAAYI,KAAKrD,qBAIpC,oBAAIlC,UAAU,SAAd,SAAwBuN,EAAYD,OACpC,6BAAKC,EAAY/H,WAvBVb,WA6Bf,cAAC,IAAD,CAAK3E,UAAU,qCAAf,SACE,eAAC,IAAD,CAAK2H,GAAG,OAAR,UACE,oGAGA","file":"static/js/8.6ec0865e.chunk.js","sourcesContent":["import React from \"react\";\nimport Card from \"react-bootstrap/Card\";\nimport Row from \"react-bootstrap/Row\";\n\nconst GenericCard = ({\n  cardTitle,\n  cardBody,\n  cardFooter,\n  cardHeight,\n  variant,\n}) => {\n  return (\n    <Card\n      style={{ height: cardHeight }}\n      className=\"text-center\"\n      bg={variant}\n      text={variant === \"light\" ? \"dark\" : \"white\"}\n    >\n      <Card.Header>\n        <b>{cardTitle}</b>\n      </Card.Header>\n      <Card.Body>\n        <Row className=\"justify-content-md-center\">{cardBody}</Row>\n      </Card.Body>\n      {cardFooter !== undefined ? (\n        <Card.Footer>{cardFooter}</Card.Footer>\n      ) : null}\n    </Card>\n  );\n};\n\nexport default GenericCard;\n","import React, { useState, useEffect } from \"react\";\nimport GenericCard from \"../../Cards/GenericCard\";\nimport { Link } from \"react-router-dom\";\nimport { CircleFlag } from \"react-circle-flags\";\nimport Button from \"react-bootstrap/Button\";\nimport { getLocalRaceDate } from \"../../../helpers/Helpers\";\n\nconst boldFont = {\n  fontWeight: 600,\n};\n\nconst PreviousRaceCard = ({ lastRace }) => {\n  const [countryCode, setCountryCode] = useState(null);\n  const [loadingCountryCode, setLoadingCountryCode] = useState(true);\n\n  useEffect(() => {\n    const fetchCountryCode = async () => {\n      await fetch(\n        `https://restcountries.eu/rest/v2/name/${lastRace.MRData.RaceTable.Races[0].Circuit.Location.country}?fullText=true`\n      )\n        .then((res) => res.json())\n        .then((result) => {\n          setCountryCode(result[0].alpha2Code);\n          setLoadingCountryCode(false);\n        });\n    };\n\n    fetchCountryCode();\n  }, [lastRace.MRData.RaceTable.Races]);\n\n  return (\n    <GenericCard\n      cardTitle=\"PREVIOUS RACE\"\n      cardBody={\n        <div>\n          <h5>Round {lastRace.MRData.RaceTable.round}</h5>\n          <h1 style={boldFont}>\n            {lastRace.MRData.RaceTable.Races[0].raceName.toUpperCase()}\n          </h1>\n          <h5>{lastRace.MRData.RaceTable.Races[0].Circuit.circuitName}</h5>\n          <h6>{lastRace.MRData.RaceTable.Races[0].date}</h6>\n          <h6>\n            {getLocalRaceDate(\n              lastRace.MRData.RaceTable.Races[0].date,\n              lastRace.MRData.RaceTable.Races[0].time\n            )}\n          </h6>\n          {loadingCountryCode ? null : (\n            <>\n              <br />\n              <CircleFlag\n                countryCode={countryCode.toLowerCase()}\n                height={120}\n              />\n            </>\n          )}\n          <h5 style={{ marginTop: \"5%\" }}>\n            {lastRace.MRData.RaceTable.Races[0].Circuit.Location.country}\n          </h5>\n          <h5>\n            {lastRace.MRData.RaceTable.Races[0].Circuit.Location.locality}\n          </h5>\n        </div>\n      }\n      cardFooter={\n        <Link\n          to={`/race/${lastRace.MRData.RaceTable.season}/${lastRace.MRData.RaceTable.round}`}\n        >\n          <Button variant=\"dark\">Full race result</Button>\n        </Link>\n      }\n      cardHeight=\"34rem\"\n      variant=\"light\"\n    />\n  );\n};\n\nexport default PreviousRaceCard;\n","import React, { useState, useEffect } from \"react\";\nimport GenericCard from \"../../Cards/GenericCard\";\nimport { Link } from \"react-router-dom\";\nimport { CircleFlag } from \"react-circle-flags\";\nimport Button from \"react-bootstrap/Button\";\nimport ClockCoutdown from \"../../Countdown/ClockCountdown\";\nimport { getLocalRaceDate } from \"../../../helpers/Helpers\";\nimport { CountriesCodeNationality } from \"../../../data/CountryCodeNationality\";\n\nconst boldFont = {\n  fontWeight: 600\n}\n\nconst NextRaceCard = ({ nextRace }) => {\n  const [countryCode, setCountryCode] = useState(null);\n  const [loadingCountryCode, setLoadingCountryCode] = useState(true);\n\n  useEffect(() => {\n    const fetchCountryCode = async () => {\n      await fetch(\n        `https://restcountries.eu/rest/v2/name/${nextRace.Circuit.Location.country}?fullText=true`\n      )\n        .then((res) => res.json())\n        .then((result) => {\n          setCountryCode(result[0].alpha2Code);\n          setLoadingCountryCode(false);\n        })\n        .catch((error) => {\n          setCountryCode(\n            CountriesCodeNationality[\n              nextRace.Circuit.Location.country\n            ].toLowerCase()\n          );\n          setLoadingCountryCode(false);\n        });\n    };\n\n    fetchCountryCode();\n  }, [nextRace.Circuit.Location.country]);\n\n  return (\n    <GenericCard\n      cardTitle=\"NEXT RACE\"\n      cardBody={\n        <>\n          <h5>Round {nextRace.round}</h5>\n          <h1 style={boldFont}>{nextRace.raceName.toUpperCase()}</h1>\n          <h5>{nextRace.Circuit.circuitName}</h5>\n          <h6>{nextRace.date}</h6>\n          <h6>{getLocalRaceDate(nextRace.date, nextRace.time)}</h6>\n          {loadingCountryCode ? null : (\n            <CircleFlag countryCode={countryCode.toLowerCase()} height={100} />\n          )}\n          <p></p>\n          <ClockCoutdown date={nextRace.date} time={nextRace.time} />\n        </>\n      }\n      cardFooter={\n        <Link to={`/race/${nextRace.season}/${nextRace.round}`}>\n          <Button variant=\"dark\">Race information</Button>\n        </Link>\n      }\n      cardHeight=\"32rem\"\n      variant=\"light\"\n    />\n  );\n};\n\nexport default NextRaceCard;\n","import React, { useState, useEffect } from \"react\";\nimport GenericCard from \"../../Cards/GenericCard\";\nimport { CountriesCodeNationality } from \"../../../data/CountryCodeNationality\";\nimport { CircleFlag } from \"react-circle-flags\";\nimport Table from \"react-bootstrap/Table\";\nimport TeamColor from \"../../TeamColor/TeamColor\";\nimport \"../Styles/Table.css\";\nimport Row from \"react-bootstrap/Row\";\nimport Col from \"react-bootstrap/Col\";\n\nconst boldFont = {\n  fontWeight: 600,\n  marginTop: \"15px\",\n  marginBottom: \"10px\",\n};\n\nconst driverName = {\n  fontWeight: 600,\n  margin: \"0px\",\n  padding: \"0px\",\n  display: \"inline\",\n  marginTop: \"50px\",\n};\n\nconst PreviousRaceStats = ({ lastRace, numberOfRaces }) => {\n  const [fastestLap, setFastestLap] = useState(null);\n  const [polePosition, setPolePosition] = useState(null);\n  const [loadingPolePosition, setLoadingPolePosition] = useState(true);\n\n  useEffect(() => {\n    const getFastestLap = () => {\n      lastRace.MRData.RaceTable.Races[0].Results.forEach((lap) => {\n        if (lap.FastestLap && lap.FastestLap.rank === \"1\") {\n          setFastestLap(lap);\n          return;\n        }\n      });\n    };\n\n    const fetchPolePosition = async () => {\n      await fetch(\n        `https://ergast.com/api/f1/${lastRace.MRData.RaceTable.season}/${lastRace.MRData.RaceTable.round}/qualifying.json`\n      )\n        .then((res) => res.json())\n        .then((result) => {\n          setPolePosition(\n            result.MRData.RaceTable.Races[0].QualifyingResults[0]\n          );\n          setLoadingPolePosition(false);\n        });\n    };\n\n    fetchPolePosition();\n    getFastestLap();\n  }, [\n    lastRace.MRData.RaceTable.season,\n    lastRace.MRData.RaceTable.round,\n    lastRace.MRData.RaceTable.Races,\n  ]);\n\n  return (\n    <GenericCard\n      cardTitle=\"PREVIOUS RACE\"\n      cardBody={\n        <div>\n          <h4 style={driverName}>PODIUM</h4>\n          <Table responsive>\n            <tbody className=\"justify-content-center\">\n              {lastRace.MRData.RaceTable.Races[0].Results.slice(0, 3).map(\n                (driver, index) => (\n                  <tr key={index} className=\"align-middle\">\n                    <td>{driver.position}</td>\n                    <td>\n                      <Row>\n                        <Col xs={2} className=\"align-self-center\">\n                          <CircleFlag\n                            countryCode={CountriesCodeNationality[\n                              driver.Driver.nationality\n                            ].toLowerCase()}\n                            height={20}\n                          />\n                        </Col>\n                        <Col xs={1}>\n                          <TeamColor\n                            constructorId={driver.Constructor.constructorId}\n                            height=\"42px\"\n                          />\n                        </Col>\n                        <Col xs={8} className=\"text-start\">\n                          <Row>\n                            <Col className=\"hideXS\">\n                              {driver.Driver.givenName}{\" \"}\n                              <p style={driverName}>\n                                {driver.Driver.familyName.toUpperCase()}\n                              </p>\n                            </Col>\n                            <Col className=\"showXS\">\n                              <p style={driverName}>\n                                {driver.Driver.familyName.toUpperCase()}\n                              </p>\n                            </Col>\n                          </Row>\n                          <Row>\n                            <Col style={{ fontSize: \"13px\" }}>\n                              {driver.Constructor.name}\n                            </Col>\n                          </Row>\n                        </Col>\n                      </Row>\n                    </td>\n                    <td>+{driver.points}</td>\n                  </tr>\n                )\n              )}\n            </tbody>\n          </Table>\n          <h4 style={boldFont}>FASTEST LAP / POLE POSITION</h4>\n          <Table responsive>\n            <tbody>\n              {fastestLap === null ? null : (\n                <tr className=\"align-middle\">\n                  <td>FL</td>\n                  <td>\n                    <Row>\n                      <Col xs={2} className=\"align-self-center\">\n                        <CircleFlag\n                          countryCode={CountriesCodeNationality[\n                            fastestLap.Driver.nationality\n                          ].toLowerCase()}\n                          height={20}\n                        />\n                      </Col>\n                      <Col xs={1}>\n                        <TeamColor\n                          constructorId={fastestLap.Constructor.constructorId}\n                          height=\"42px\"\n                        />\n                      </Col>\n                      <Col xs={8} className=\"text-start\">\n                        <Row>\n                          <Col className=\"hideXS\">\n                            {fastestLap.Driver.givenName}{\" \"}\n                            <p style={driverName}>\n                              {fastestLap.Driver.familyName.toUpperCase()}\n                            </p>\n                          </Col>\n                          <Col className=\"showXS\">\n                            <p style={driverName}>\n                              {fastestLap.Driver.familyName.toUpperCase()}\n                            </p>\n                          </Col>\n                        </Row>\n                        <Row>\n                          <Col style={{ fontSize: \"13px\" }}>\n                            {fastestLap.Constructor.name}\n                          </Col>\n                        </Row>\n                      </Col>\n                    </Row>\n                  </td>\n                  <td>{fastestLap.FastestLap.Time.time}</td>\n                </tr>\n              )}\n              {loadingPolePosition ? null : (\n                <tr className=\"align-middle\">\n                  <td>PP</td>\n                  <td>\n                    <Row>\n                      <Col xs={2} className=\"align-self-center\">\n                        <CircleFlag\n                          countryCode={CountriesCodeNationality[\n                            polePosition.Driver.nationality\n                          ].toLowerCase()}\n                          height={20}\n                        />\n                      </Col>\n                      <Col xs={1}>\n                        <TeamColor\n                          constructorId={polePosition.Constructor.constructorId}\n                          height=\"42px\"\n                        />\n                      </Col>\n                      <Col xs={8} className=\"text-start\">\n                        <Row>\n                          <Col className=\"hideXS\">\n                            {polePosition.Driver.givenName}{\" \"}\n                            <p style={driverName}>\n                              {polePosition.Driver.familyName.toUpperCase()}\n                            </p>\n                          </Col>\n                          <Col className=\"showXS\">\n                            <p style={driverName}>\n                              {polePosition.Driver.familyName.toUpperCase()}\n                            </p>\n                          </Col>\n                        </Row>\n                        <Row>\n                          <Col style={{ fontSize: \"13px\" }}>\n                            {polePosition.Constructor.name}\n                          </Col>\n                        </Row>\n                      </Col>\n                    </Row>\n                  </td>\n                  <td>{polePosition.Q3}</td>\n                </tr>\n              )}\n            </tbody>\n          </Table>\n        </div>\n      }\n      cardFooter={\n        <h4>\n          Round: {lastRace.MRData.RaceTable.round} / {numberOfRaces}\n        </h4>\n      }\n      cardHeight=\"34rem\"\n      variant=\"light\"\n    />\n  );\n};\n\nexport default PreviousRaceStats;\n","import React from \"react\";\nimport GenericCard from \"../../Cards/GenericCard\";\nimport { Link } from \"react-router-dom\";\nimport DriversStandings from \"../Standings/DriversStandings\";\nimport Button from \"react-bootstrap/Button\";\n\nconst DriversStandingsCard = ({ driversStandings }) => {\n  return (\n    <GenericCard\n      cardTitle=\"DRIVERS' STANDINGS\"\n      cardBody={\n        <DriversStandings\n          style={{\n            overflow: \"hidden\",\n            overflowY: \"scroll\",\n            height: \"415px\",\n          }}\n          driversStandings={driversStandings}\n        />\n      }\n      cardHeight=\"34rem\"\n      variant=\"light\"\n      cardFooter={\n        <Link to=\"/standings\">\n          <Button variant=\"dark\">Full standings</Button>\n        </Link>\n      }\n    />\n  );\n};\n\nexport default DriversStandingsCard;\n","import React from \"react\";\nimport GenericCard from \"../../Cards/GenericCard\";\nimport Button from \"react-bootstrap/Button\";\nimport { Link } from \"react-router-dom\";\nimport ConstructorsStandings from \"../Standings/ConstructorsStandings\";\n\nconst ConstructorsStandingsCard = ({ constructorsStandings }) => {\n  return (\n    <GenericCard\n      cardTitle=\"CONSTRUCTORS' STANDINGS\"\n      cardBody={\n        <ConstructorsStandings\n          style={{\n            overflow: \"hidden\",\n            overflowY: \"scroll\",\n            height: \"415px\",\n          }}\n          constructorsStandings={constructorsStandings}\n        />\n      }\n      cardFooter={\n        <Link to=\"/standings\">\n          <Button variant=\"dark\">Full standings</Button>\n        </Link>\n      }\n      cardHeight=\"34rem\"\n      variant=\"light\"\n    />\n  );\n};\n\nexport default ConstructorsStandingsCard;\n","import React, { useState, useEffect } from \"react\";\nimport Row from \"react-bootstrap/Row\";\nimport Col from \"react-bootstrap/Col\";\nimport Container from \"react-bootstrap/Container\";\nimport PreviousRaceCard from \"../MainFeed/PreviousRaceCard\";\nimport NextRaceCard from \"./NextRaceCard\";\nimport Spinner from \"react-bootstrap/Spinner\";\nimport PreviousRaceStats from \"./PreviousRaceStats\";\nimport DriversStandingsCard from \"./DriversStandingsCard\";\nimport ConstructorsStandingsCard from \"./ConstructorsStandingsCard\";\n\nconst cardsSpacing = {\n  marginBottom: \"10px\",\n};\n\nconst MainFeed = () => {\n  const TOTAL_NUMBER_OF_RACES = \"23\";\n  const [nextRace, setNextRace] = useState(null);\n  const [lastRace, setLastRace] = useState(null);\n  const [driversStandings, setDriversStandings] = useState(null);\n  const [loadingNextRace, setLoadingNextRace] = useState(true);\n  const [loadingLastRace, setLoadingLastRace] = useState(true);\n  const [constructorsStandings, setConstructorsStandings] = useState(null);\n  const [loadingTeamsStandings, setLoadingTeamsStandings] = useState(true);\n  const [loadingDriversStandings, setLoadingDriversStandings] = useState(true);\n\n  useEffect(() => {\n    const fetchPreviousRaceResult = async () => {\n      await fetch(`https://ergast.com/api/f1/current/last/results.json`)\n        .then((res) => res.json())\n        .then((result) => {\n          setLastRace(result);\n          setLoadingLastRace(false);\n        });\n    };\n\n    const fetchNextRaceData = async (round) => {\n      await fetch(`https://ergast.com/api/f1/current/next.json`)\n        .then((res) => res.json())\n        .then((result) => {\n          setNextRace(result.MRData.RaceTable.Races[0]);\n          setLoadingNextRace(false);\n        });\n    };\n\n    const fetchConstructorsStandings = async () => {\n      await fetch(`https://ergast.com/api/f1/current/constructorStandings.json`)\n        .then((res) => res.json())\n        .then((result) => {\n          setConstructorsStandings(\n            result.MRData.StandingsTable.StandingsLists[0].ConstructorStandings\n          );\n          setLoadingTeamsStandings(false);\n        });\n    };\n\n    const fetchDriversStandings = async () => {\n      await fetch(`https://ergast.com/api/f1/current/driverStandings.json`)\n        .then((res) => res.json())\n        .then((result) => {\n          setDriversStandings(\n            result.MRData.StandingsTable.StandingsLists[0].DriverStandings\n          );\n          setLoadingDriversStandings(false);\n        });\n    };\n\n    fetchPreviousRaceResult();\n    fetchNextRaceData();\n    fetchDriversStandings();\n    fetchConstructorsStandings();\n  }, []);\n\n  return (\n    <Container style={{ minHeight: \"500px\" }}>\n      <Row className=\"justify-content-center text-center\">\n        <Col md=\"auto\">\n          <h1>\n            {loadingLastRace ? null : lastRace.MRData.RaceTable.season} FORMULA\n            ONE\n          </h1>\n        </Col>\n      </Row>\n      {loadingLastRace || loadingNextRace ? (\n        <Row className=\"justify-content-center text-center\">\n          <Spinner animation=\"border\" />\n        </Row>\n      ) : (\n        <Row className=\"justify-content-center text-center\">\n          <Col lg={12} style={cardsSpacing}>\n            <NextRaceCard nextRace={nextRace} />\n          </Col>\n          <Col xs={12} lg={6} style={cardsSpacing}>\n            <PreviousRaceCard lastRace={lastRace} />\n          </Col>\n          <Col xs={12} lg={6} style={cardsSpacing}>\n            <PreviousRaceStats\n              lastRace={lastRace}\n              numberOfRaces={TOTAL_NUMBER_OF_RACES}\n            />\n          </Col>\n        </Row>\n      )}\n      {loadingDriversStandings || loadingTeamsStandings ? null : (\n        <Row>\n          <Col style={cardsSpacing}>\n            <DriversStandingsCard driversStandings={driversStandings} />\n          </Col>\n          <Col style={cardsSpacing}>\n            <ConstructorsStandingsCard\n              constructorsStandings={constructorsStandings}\n            />\n          </Col>\n        </Row>\n      )}\n    </Container>\n  );\n};\n\nexport default MainFeed;\n","import React from \"react\";\nimport \"react-circular-progressbar/dist/styles.css\";\nimport NavBar from \"../components/Navbar/Navbar\";\nimport Footer from \"../components/Footer/Footer\";\nimport MainFeed from \"../components/Stats/MainFeed/MainFeed\";\n\nconst HomePage = () => {\n  return (\n    <div>\n      <NavBar />\n      <MainFeed />\n      <Footer />\n    </div>\n  );\n};\n\nexport default HomePage;\n","export const CountriesCodeNationality = {\n  British: \"GB\",\n  Finnish: \"FI\",\n  Dutch: \"NL\",\n  Mexican: \"MX\",\n  Spanish: \"ES\",\n  Australian: \"AU\",\n  Monegasque: \"MC\",\n  French: \"FR\",\n  German: \"DE\",\n  Japanese: \"JP\",\n  Canadian: \"CA\",\n  Italian: \"IT\",\n  Russian: \"RU\",\n  Austrian: \"AT\",\n  Swiss: \"CH\",\n  American: \"US\",\n  Thai: \"TH\",\n  \"New Zealander\": \"NZ\",\n  \"New Zealand\": \"NZ\",\n  Swedish: \"SE\",\n  Portuguese: \"PT\",\n  Brazilian: \"BR\",\n  Hungarian: \"HU\",\n  Argentine: \"AR\",\n  Belgian: \"BE\",\n  Belgium: \"BE\",\n  \"South African\": \"ZA\",\n  Danish: \"DK\",\n  Liechtensteiner: \"LI\",\n  \"Hong Kong\": \"HK\",\n  Irish: \"IE\",\n  Chilean: \"CL\",\n  Venezuelan: \"VE\",\n  Colombian: \"CO\",\n  Czech: \"CZ\",\n  Malaysian: \"MY\",\n  Indian: \"IN\",\n  Polish: \"PL\",\n  Indonesian: \"ID\",\n  Rhodesian: \"ZW\",\n  Russia: \"RU\",\n  Korea:  \"KR\"\n};\n","import React from \"react\";\nimport Container from \"react-bootstrap/Container\";\nimport Navbar from \"react-bootstrap/Navbar\";\nimport \"./Navbar.css\";\nimport { Link } from \"react-router-dom\";\nimport { AiFillGithub } from \"react-icons/ai\";\nimport { GiCheckeredFlag } from \"react-icons/gi\";\n\nconst NavBar = () => {\n  return (\n    <Navbar className=\"navbar\" bg=\"dark\" variant=\"dark\">\n      <Container>\n        <Navbar.Brand>\n          <GiCheckeredFlag size={30} />\n        </Navbar.Brand>\n        <Link to=\"/\" style={{ textDecoration: \"none\" }}>\n          <Navbar.Brand>Home</Navbar.Brand>\n        </Link>\n        <Link to=\"/schedule\" style={{ textDecoration: \"none\" }}>\n          <Navbar.Brand>Races</Navbar.Brand>\n        </Link>\n        <Link to=\"/standings\" style={{ textDecoration: \"none\" }}>\n          <Navbar.Brand>Standings</Navbar.Brand>\n        </Link>\n        <Navbar.Collapse className=\"justify-content-end\">\n          <Navbar.Brand href=\"https://github.com/jdro10\" aria-label=\"Github\">\n            <AiFillGithub size={25} />\n          </Navbar.Brand>\n        </Navbar.Collapse>\n      </Container>\n    </Navbar>\n  );\n};\n\nexport default NavBar;\n","import React from \"react\";\nimport \"./Footer.css\";\nimport Container from \"react-bootstrap/Container\";\nimport Row from \"react-bootstrap/Row\";\nimport Col from \"react-bootstrap/Col\";\nimport { GiCheckeredFlag } from \"react-icons/gi\";\nimport { FaGithub } from \"react-icons/fa\";\nimport { FaReact } from \"react-icons/fa\";\nimport { IoLogoJavascript } from \"react-icons/io\";\nimport { BsBootstrap } from \"react-icons/bs\";\nimport { SiVisualstudiocode } from \"react-icons/si\";\nimport { IoLogoNpm } from \"react-icons/io\";\nimport { FaHtml5 } from \"react-icons/fa\";\nimport { FaCss3Alt } from \"react-icons/fa\";\nimport { SiLeaflet } from \"react-icons/si\";\n\nconst Footer = () => {\n  return (\n    <footer>\n      <Container>\n        <Row className=\"justify-content-center text-center\" xs=\"auto\" id=\"row\">\n          <Col>\n            <GiCheckeredFlag size={40} />\n          </Col>\n          <Col>\n            <FaGithub size={40} />\n          </Col>\n          <Col>\n            <FaReact size={40} />\n          </Col>\n          <Col>\n            <IoLogoJavascript size={40} />\n          </Col>\n          <Col>\n            <FaHtml5 size={40} />\n          </Col>\n          <Col>\n            <FaCss3Alt size={40} />\n          </Col>\n          <Col>\n            <BsBootstrap size={40} />\n          </Col>\n          <Col>\n            <SiLeaflet size={40} />\n          </Col>\n          <Col>\n            <IoLogoNpm size={40} />\n          </Col>\n          <Col>\n            <SiVisualstudiocode size={40} />\n          </Col>\n        </Row>\n        <Row className=\"justify-content-md-center\" xs=\"auto\" id=\"lastRow\" />\n        <Row className=\"justify-content-md-center\">\n          <Col md=\"auto\" style={{ textAlign: \"center\" }}>\n            <h5>API</h5>\n          </Col>\n        </Row>\n        <Row className=\"justify-content-md-center\">\n          <Col md=\"auto\" style={{ textAlign: \"center\" }}>\n            All racing data is obtained through{\" \"}\n            <a href=\"http://ergast.com/mrd/\" style={{ color: \"white\" }}>\n              Ergast API\n            </a>\n            .\n          </Col>\n        </Row>\n        <Row className=\"justify-content-md-center\">\n          <Col md=\"auto\" style={{ textAlign: \"center\" }}>\n            Countries data is obtained through{\" \"}\n            <a href=\"https://restcountries.eu/\" style={{ color: \"white\" }}>\n              REST Countries API\n            </a>\n            .\n          </Col>\n        </Row>\n        <Row className=\"justify-content-md-center\">\n          <Col md=\"auto\" style={{ textAlign: \"center\" }}>\n            Some drivers, teams and circuits data are obtained through{\" \"}\n            <a\n              href=\"https://en.wikipedia.org/wiki/Main_Page\"\n              style={{ color: \"white\" }}\n            >\n              Wikipedia API\n            </a>\n            .\n          </Col>\n        </Row>\n        <br />\n        <Row className=\"justify-content-md-center\">\n          <Col md=\"auto\" style={{ textAlign: \"center\" }}>\n            <h5>Disclaimer</h5>\n          </Col>\n        </Row>\n        <Row className=\"justify-content-md-center\">\n          <Col md=\"auto\" style={{ textAlign: \"center\" }}>\n            This website was developed for learning and educational purposes\n            only.\n          </Col>\n        </Row>\n        <Row className=\"justify-content-md-center\">\n          <Col md=\"auto\" style={{ textAlign: \"center\" }}>\n            Data displayed may be inaccurate. By using this website you\n            acknowledge this.\n          </Col>\n        </Row>\n        <Row className=\"justify-content-md-center\">\n          <Col md=\"auto\" style={{ textAlign: \"center\" }}>\n            The author disclaims all responsibility for any loss or damage\n            arising from the use of this website.\n          </Col>\n        </Row>\n        <br />\n        <Row className=\"justify-content-md-center\">\n          <Col md={7}>\n            <p style={{ textAlign: \"center\" }}>\n              This website is unofficial and is not associated in any way with\n              the Formula 1 companies. F1, FORMULA ONE, FORMULA 1, FIA FORMULA\n              ONE WORLD CHAMPIONSHIP, GRAND PRIX and related marks are trade\n              marks of Formula One Licensing B.V.\n            </p>\n          </Col>\n        </Row>\n      </Container>\n    </footer>\n  );\n};\n\nexport default Footer;\n","export const TeamColors = {\n  red_bull: \"#0000FF\",\n  williams: \"#1E90FF\",\n  mercedes: \"#7FFFD4\",\n  mclaren: \"#FFA500\",\n  aston_martin: \"#008000\",\n  alphatauri: \"#778899\",\n  alpine: \"#4169E1\",\n  ferrari: \"#FF0000\",\n  haas: \"#FFFFFF\",\n  alfa: \"#8B0000\",\n  renault: \"#FFFF00\",\n  racing_point: \"#FFC0CB\"\n};\n","import React from \"react\";\nimport { TeamColors } from \"../../data/TeamColors\";\n\nconst TeamColor = ({ constructorId, height = \"27px\" }) => {\n  return (\n    <div\n      style={{\n        width: \"3px\",\n        height: height,\n        backgroundColor: TeamColors.hasOwnProperty(constructorId)\n          ? TeamColors[constructorId]\n          : \"#000000\",\n      }}\n    />\n  );\n};\n\nexport default TeamColor;\n","export function getLocalRaceDate(date, time) {\n  const raceDate = new Date(date + \"T\" + time);\n  const hours = (raceDate.getHours() < 10 ? \"0\" : \"\") + raceDate.getHours();\n  const minutes =\n    (raceDate.getMinutes() < 10 ? \"0\" : \"\") + raceDate.getMinutes();\n\n  return hours + \":\" + minutes + \":00\";\n}\n","import React from \"react\";\nimport Col from \"react-bootstrap/Col\";\nimport Countdown from \"react-countdown\";\n\nconst ClockCountdown = ({ date, time }) => {\n  const renderer = ({ days, hours, minutes, seconds, completed }) => {\n    if (completed) {\n      return (\n        <Col>\n          <h1>Race in progress</h1>\n          <h5>Waiting for race results</h5>\n        </Col>\n      );\n    } else {\n      return (\n        <>\n          <Col xs={3} sm={2} lg={1}>\n            <h1>{days}</h1>\n            <h5>DAYS</h5>\n          </Col>\n          <Col xs={3} sm={2} lg={1}>\n            <h1>{hours}</h1>\n            <h5>HRS</h5>\n          </Col>\n          <Col xs={3} sm={2} lg={1}>\n            <h1>{minutes}</h1>\n            <h5>MIN</h5>\n          </Col>\n          <Col xs={3} sm={2} lg={1}>\n            <h1>{seconds}</h1>\n            <h5>SEC</h5>\n          </Col>\n        </>\n      );\n    }\n  };\n\n  return (\n    <Countdown\n      date={\n        Date.now() +\n        (new Date(date).getTime() +\n          time.split(\":\")[0] * 3600000 -\n          new Date().getTime())\n      }\n      renderer={renderer}\n    />\n  );\n};\n\nexport default ClockCountdown;\n","import React from \"react\";\nimport Table from \"react-bootstrap/Table\";\nimport { CircleFlag } from \"react-circle-flags\";\nimport { CountriesCodeNationality } from \"../../../data/CountryCodeNationality\";\nimport Row from \"react-bootstrap/Row\";\nimport Col from \"react-bootstrap/Col\";\nimport \"../Styles/Table.css\";\nimport TeamColor from \"../../TeamColor/TeamColor\";\nimport { useHistory } from \"react-router-dom\";\n\nconst boldFont = {\n  fontWeight: 600,\n  margin: \"0px\",\n  padding: \"0px\",\n  display: \"inline\",\n};\n\nconst DriversStandings = ({ style, driversStandings }) => {\n  const history = useHistory();\n\n  const rowClick = (driverId) => {\n    history.push(`/driver/${driverId}`);\n  };\n\n  return (\n    <div style={style}>\n      <Table className=\"table-hover\" responsive=\"xs\">\n        <thead>\n          <tr>\n            <th>POS</th>\n            <th className=\"hideXS\">NO</th>\n            <th>NAME/TEAM</th>\n            <th className=\"hideXS\">WINS</th>\n            <th>POINTS</th>\n          </tr>\n        </thead>\n        <tbody>\n          {driversStandings.map((driver, index) => (\n            <tr\n              key={index}\n              className=\"align-middle\"\n              style={{ cursor: \"pointer\" }}\n              onClick={() => rowClick(driver.Driver.driverId)}\n            >\n              <td>{driver.position}</td>\n              <td className=\"hideXS\">{driver.Driver.permanentNumber}</td>\n              <td>\n                <Row className=\"g-0\">\n                  <Col xs={2} className=\"align-self-center\">\n                    <CircleFlag\n                      countryCode={CountriesCodeNationality[\n                        driver.Driver.nationality\n                      ].toLowerCase()}\n                      height={20}\n                    />\n                  </Col>\n                  <Col xs={1}>\n                    <TeamColor\n                      constructorId={driver.Constructors[0].constructorId}\n                      height=\"42px\"\n                    />\n                  </Col>\n                  <Col xs={8} className=\"text-start\">\n                    <Row>\n                      <Col className=\"showXS\">\n                        <p style={boldFont}>\n                          {driver.Driver.familyName.toUpperCase()}\n                        </p>\n                      </Col>\n                      <Col className=\"hideXS\">\n                        {driver.Driver.givenName}{\" \"}\n                        <p style={boldFont}>\n                          {driver.Driver.familyName.toUpperCase()}\n                        </p>\n                      </Col>\n                    </Row>\n                    <Row>\n                      <Col style={{ fontSize: \"13px\" }}>\n                        {driver.Constructors[0].name}\n                      </Col>\n                    </Row>\n                  </Col>\n                </Row>\n              </td>\n              <td className=\"hideXS\">{driver.wins}</td>\n              <td>{driver.points}</td>\n            </tr>\n          ))}\n        </tbody>\n      </Table>\n    </div>\n  );\n};\n\nexport default DriversStandings;\n","import React from \"react\";\nimport Table from \"react-bootstrap/Table\";\nimport { CircleFlag } from \"react-circle-flags\";\nimport { CountriesCodeNationality } from \"../../../data/CountryCodeNationality\";\nimport Row from \"react-bootstrap/Row\";\nimport Col from \"react-bootstrap/Col\";\nimport \"../Styles/Table.css\";\nimport TeamColor from \"../../TeamColor/TeamColor\";\n\nconst ConstructorsStandings = ({ style, constructorsStandings }) => {\n  return (\n    <div style={style}>\n      {constructorsStandings !== null ? (\n        <Table responsive=\"sm\">\n          <thead>\n            <tr>\n              <th>POS</th>\n              <th>NAME</th>\n              <th className=\"hideXS\">WINS</th>\n              <th>POINTS</th>\n            </tr>\n          </thead>\n          <tbody>\n            {constructorsStandings.map((constructor, index) => (\n              <tr key={index}>\n                <td>{constructor.position}</td>\n                <td>\n                  <Row>\n                    <Col xs={2}>\n                      <CircleFlag\n                        countryCode={CountriesCodeNationality[\n                          constructor.Constructor.nationality\n                        ].toLowerCase()}\n                        height={20}\n                      />\n                    </Col>\n                    <Col xs={1}>\n                      <TeamColor\n                        constructorId={constructor.Constructor.constructorId}\n                      />\n                    </Col>\n                    <Col xs={8} className=\"text-start\">\n                      {constructor.Constructor.name.toUpperCase()}\n                    </Col>\n                  </Row>\n                </td>\n                <td className=\"hideXS\">{constructor.wins}</td>\n                <td>{constructor.points}</td>\n              </tr>\n            ))}\n          </tbody>\n        </Table>\n      ) : (\n        <Row className=\"justify-content-center text-center\">\n          <Col md=\"auto\">\n            <h3>\n              There's no constructors' standings data available for this season.\n            </h3>\n            <br />\n          </Col>\n        </Row>\n      )}\n    </div>\n  );\n};\n\nexport default ConstructorsStandings;\n"],"sourceRoot":""}